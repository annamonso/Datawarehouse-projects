// ============================================================================
//
// Copyright (c) 2006-2015, Talend Inc.
//
// This source code has been automatically generated by_Talend Open Studio for Data Integration
// / Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.


package dw_project2.aircraftutilization_0_1;

import routines.Numeric;
import routines.DataOperation;
import routines.TalendDataGenerator;
import routines.TalendStringUtil;
import routines.TalendString;
import routines.StringHandling;
import routines.Relational;
import routines.TalendDate;
import routines.Mathematical;
import routines.system.*;
import routines.system.api.*;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.math.BigDecimal;
import java.io.ByteArrayOutputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.ObjectOutputStream;
import java.io.ObjectInputStream;
import java.io.IOException;
import java.util.Comparator;
 





@SuppressWarnings("unused")

/**
 * Job: AircraftUtilization Purpose: <br>
 * Description:  <br>
 * @author user@talend.com
 * @version 8.0.1.20211109_1610
 * @status 
 */
public class AircraftUtilization implements TalendJob {

protected static void logIgnoredError(String message, Throwable cause) {
       System.err.println(message);
       if (cause != null) {
               cause.printStackTrace();
       }

}


	public final Object obj = new Object();

	// for transmiting parameters purpose
	private Object valueObject = null;

	public Object getValueObject() {
		return this.valueObject;
	}

	public void setValueObject(Object valueObject) {
		this.valueObject = valueObject;
	}
	
	private final static String defaultCharset = java.nio.charset.Charset.defaultCharset().name();

	
	private final static String utf8Charset = "UTF-8";
	//contains type for every context property
	public class PropertiesWithType extends java.util.Properties {
		private static final long serialVersionUID = 1L;
		private java.util.Map<String,String> propertyTypes = new java.util.HashMap<>();
		
		public PropertiesWithType(java.util.Properties properties){
			super(properties);
		}
		public PropertiesWithType(){
			super();
		}
		
		public void setContextType(String key, String type) {
			propertyTypes.put(key,type);
		}
	
		public String getContextType(String key) {
			return propertyTypes.get(key);
		}
	}
	
	// create and load default properties
	private java.util.Properties defaultProps = new java.util.Properties();
	// create application properties with default
	public class ContextProperties extends PropertiesWithType {

		private static final long serialVersionUID = 1L;

		public ContextProperties(java.util.Properties properties){
			super(properties);
		}
		public ContextProperties(){
			super();
		}

		public void synchronizeContext(){
			
		}
		
		//if the stored or passed value is "<TALEND_NULL>" string, it mean null
		public String getStringValue(String key) {
			String origin_value = this.getProperty(key);
			if(NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY.equals(origin_value)) {
				return null;
			}
			return origin_value;
		}

	}
	protected ContextProperties context = new ContextProperties(); // will be instanciated by MS.
	public ContextProperties getContext() {
		return this.context;
	}
	private final String jobVersion = "0.1";
	private final String jobName = "AircraftUtilization";
	private final String projectName = "DW_PROJECT2";
	public Integer errorCode = null;
	private String currentComponent = "";
	
		private final java.util.Map<String, Object> globalMap = new java.util.HashMap<String, Object>();
        private final static java.util.Map<String, Object> junitGlobalMap = new java.util.HashMap<String, Object>();
	
		private final java.util.Map<String, Long> start_Hash = new java.util.HashMap<String, Long>();
		private final java.util.Map<String, Long> end_Hash = new java.util.HashMap<String, Long>();
		private final java.util.Map<String, Boolean> ok_Hash = new java.util.HashMap<String, Boolean>();
		public  final java.util.List<String[]> globalBuffer = new java.util.ArrayList<String[]>();
	

private RunStat runStat = new RunStat();

	// OSGi DataSource
	private final static String KEY_DB_DATASOURCES = "KEY_DB_DATASOURCES";
	
	private final static String KEY_DB_DATASOURCES_RAW = "KEY_DB_DATASOURCES_RAW";

	public void setDataSources(java.util.Map<String, javax.sql.DataSource> dataSources) {
		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		for (java.util.Map.Entry<String, javax.sql.DataSource> dataSourceEntry : dataSources.entrySet()) {
			talendDataSources.put(dataSourceEntry.getKey(), new routines.system.TalendDataSource(dataSourceEntry.getValue()));
		}
		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
		globalMap.put(KEY_DB_DATASOURCES_RAW, new java.util.HashMap<String, javax.sql.DataSource>(dataSources));
	}
	
	public void setDataSourceReferences(List serviceReferences) throws Exception{
		
		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		java.util.Map<String, javax.sql.DataSource> dataSources = new java.util.HashMap<String, javax.sql.DataSource>();
		
		for (java.util.Map.Entry<String, javax.sql.DataSource> entry : BundleUtils.getServices(serviceReferences,  javax.sql.DataSource.class).entrySet()) {
                    dataSources.put(entry.getKey(), entry.getValue());
                    talendDataSources.put(entry.getKey(), new routines.system.TalendDataSource(entry.getValue()));
		}

		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
		globalMap.put(KEY_DB_DATASOURCES_RAW, new java.util.HashMap<String, javax.sql.DataSource>(dataSources));
	}


private final java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream();
private final java.io.PrintStream errorMessagePS = new java.io.PrintStream(new java.io.BufferedOutputStream(baos));

public String getExceptionStackTrace() {
	if ("failure".equals(this.getStatus())) {
		errorMessagePS.flush();
		return baos.toString();
	}
	return null;
}

private Exception exception;

public Exception getException() {
	if ("failure".equals(this.getStatus())) {
		return this.exception;
	}
	return null;
}

private class TalendException extends Exception {

	private static final long serialVersionUID = 1L;

	private java.util.Map<String, Object> globalMap = null;
	private Exception e = null;
	private String currentComponent = null;
	private String virtualComponentName = null;
	
	public void setVirtualComponentName (String virtualComponentName){
		this.virtualComponentName = virtualComponentName;
	}

	private TalendException(Exception e, String errorComponent, final java.util.Map<String, Object> globalMap) {
		this.currentComponent= errorComponent;
		this.globalMap = globalMap;
		this.e = e;
	}

	public Exception getException() {
		return this.e;
	}

	public String getCurrentComponent() {
		return this.currentComponent;
	}

	
    public String getExceptionCauseMessage(Exception e){
        Throwable cause = e;
        String message = null;
        int i = 10;
        while (null != cause && 0 < i--) {
            message = cause.getMessage();
            if (null == message) {
                cause = cause.getCause();
            } else {
                break;          
            }
        }
        if (null == message) {
            message = e.getClass().getName();
        }   
        return message;
    }

	@Override
	public void printStackTrace() {
		if (!(e instanceof TalendException || e instanceof TDieException)) {
			if(virtualComponentName!=null && currentComponent.indexOf(virtualComponentName+"_")==0){
				globalMap.put(virtualComponentName+"_ERROR_MESSAGE",getExceptionCauseMessage(e));
			}
			globalMap.put(currentComponent+"_ERROR_MESSAGE",getExceptionCauseMessage(e));
			System.err.println("Exception in component " + currentComponent + " (" + jobName + ")");
		}
		if (!(e instanceof TDieException)) {
			if(e instanceof TalendException){
				e.printStackTrace();
			} else {
				e.printStackTrace();
				e.printStackTrace(errorMessagePS);
				AircraftUtilization.this.exception = e;
			}
		}
		if (!(e instanceof TalendException)) {
		try {
			for (java.lang.reflect.Method m : this.getClass().getEnclosingClass().getMethods()) {
				if (m.getName().compareTo(currentComponent + "_error") == 0) {
					m.invoke(AircraftUtilization.this, new Object[] { e , currentComponent, globalMap});
					break;
				}
			}

			if(!(e instanceof TDieException)){
			}
		} catch (Exception e) {
			this.e.printStackTrace();
		}
		}
	}
}

			public void tDBInput_5_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_5_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_5_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tUnite_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_5_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_5_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_5_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBOutput_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_5_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileOutputDelimited_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_5_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBInput_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_5_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJoin_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_5_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_5_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFilterRow_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_5_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_4_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_5_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBInput_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJoin_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBInput_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_3_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJoin_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_3_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_3_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBInput_4_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_3_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tHash_row7_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tHash_TRIMflightID_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_3_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tHash_row4_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_3_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAggregateRow_1_AGGOUT_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
							tAggregateRow_1_AGGIN_error(exception, errorComponent, globalMap);
						
						}
					
			public void tAggregateRow_1_AGGIN_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_5_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBInput_5_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tDBInput_2_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tDBInput_3_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
	






public static class dboutStruct implements routines.system.IPersistableRow<dboutStruct> {
    final static byte[] commonByteArrayLock_DW_PROJECT2_AircraftUtilization = new byte[0];
    static byte[] commonByteArray_DW_PROJECT2_AircraftUtilization = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public String aircraftID;

				public String getAircraftID () {
					return this.aircraftID;
				}
				
			    public java.util.Date timeID;

				public java.util.Date getTimeID () {
					return this.timeID;
				}
				
			    public Integer FlightHours;

				public Integer getFlightHours () {
					return this.FlightHours;
				}
				
			    public Integer FlightCycles;

				public Integer getFlightCycles () {
					return this.FlightCycles;
				}
				
			    public Integer ScheduledOutOfService;

				public Integer getScheduledOutOfService () {
					return this.ScheduledOutOfService;
				}
				
			    public Integer UnscheduledOutOfService;

				public Integer getUnscheduledOutOfService () {
					return this.UnscheduledOutOfService;
				}
				
			    public Integer Delays;

				public Integer getDelays () {
					return this.Delays;
				}
				
			    public Integer Cancellations;

				public Integer getCancellations () {
					return this.Cancellations;
				}
				
			    public Integer DelayedMinutes;

				public Integer getDelayedMinutes () {
					return this.DelayedMinutes;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.aircraftID == null) ? 0 : this.aircraftID.hashCode());
					
						result = prime * result + ((this.timeID == null) ? 0 : this.timeID.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final dboutStruct other = (dboutStruct) obj;
		
						if (this.aircraftID == null) {
							if (other.aircraftID != null)
								return false;
						
						} else if (!this.aircraftID.equals(other.aircraftID))
						
							return false;
					
						if (this.timeID == null) {
							if (other.timeID != null)
								return false;
						
						} else if (!this.timeID.equals(other.timeID))
						
							return false;
					

		return true;
    }

	public void copyDataTo(dboutStruct other) {

		other.aircraftID = this.aircraftID;
	            other.timeID = this.timeID;
	            other.FlightHours = this.FlightHours;
	            other.FlightCycles = this.FlightCycles;
	            other.ScheduledOutOfService = this.ScheduledOutOfService;
	            other.UnscheduledOutOfService = this.UnscheduledOutOfService;
	            other.Delays = this.Delays;
	            other.Cancellations = this.Cancellations;
	            other.DelayedMinutes = this.DelayedMinutes;
	            
	}

	public void copyKeysDataTo(dboutStruct other) {

		other.aircraftID = this.aircraftID;
	            	other.timeID = this.timeID;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_DW_PROJECT2_AircraftUtilization.length) {
				if(length < 1024 && commonByteArray_DW_PROJECT2_AircraftUtilization.length == 0) {
   					commonByteArray_DW_PROJECT2_AircraftUtilization = new byte[1024];
				} else {
   					commonByteArray_DW_PROJECT2_AircraftUtilization = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_DW_PROJECT2_AircraftUtilization, 0, length);
			strReturn = new String(commonByteArray_DW_PROJECT2_AircraftUtilization, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_DW_PROJECT2_AircraftUtilization.length) {
				if(length < 1024 && commonByteArray_DW_PROJECT2_AircraftUtilization.length == 0) {
   					commonByteArray_DW_PROJECT2_AircraftUtilization = new byte[1024];
				} else {
   					commonByteArray_DW_PROJECT2_AircraftUtilization = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_DW_PROJECT2_AircraftUtilization, 0, length);
			strReturn = new String(commonByteArray_DW_PROJECT2_AircraftUtilization, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_DW_PROJECT2_AircraftUtilization) {

        	try {

        		int length = 0;
		
					this.aircraftID = readString(dis);
					
					this.timeID = readDate(dis);
					
						this.FlightHours = readInteger(dis);
					
						this.FlightCycles = readInteger(dis);
					
						this.ScheduledOutOfService = readInteger(dis);
					
						this.UnscheduledOutOfService = readInteger(dis);
					
						this.Delays = readInteger(dis);
					
						this.Cancellations = readInteger(dis);
					
						this.DelayedMinutes = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_DW_PROJECT2_AircraftUtilization) {

        	try {

        		int length = 0;
		
					this.aircraftID = readString(dis);
					
					this.timeID = readDate(dis);
					
						this.FlightHours = readInteger(dis);
					
						this.FlightCycles = readInteger(dis);
					
						this.ScheduledOutOfService = readInteger(dis);
					
						this.UnscheduledOutOfService = readInteger(dis);
					
						this.Delays = readInteger(dis);
					
						this.Cancellations = readInteger(dis);
					
						this.DelayedMinutes = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.aircraftID,dos);
					
					// java.util.Date
				
						writeDate(this.timeID,dos);
					
					// Integer
				
						writeInteger(this.FlightHours,dos);
					
					// Integer
				
						writeInteger(this.FlightCycles,dos);
					
					// Integer
				
						writeInteger(this.ScheduledOutOfService,dos);
					
					// Integer
				
						writeInteger(this.UnscheduledOutOfService,dos);
					
					// Integer
				
						writeInteger(this.Delays,dos);
					
					// Integer
				
						writeInteger(this.Cancellations,dos);
					
					// Integer
				
						writeInteger(this.DelayedMinutes,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.aircraftID,dos);
					
					// java.util.Date
				
						writeDate(this.timeID,dos);
					
					// Integer
				
						writeInteger(this.FlightHours,dos);
					
					// Integer
				
						writeInteger(this.FlightCycles,dos);
					
					// Integer
				
						writeInteger(this.ScheduledOutOfService,dos);
					
					// Integer
				
						writeInteger(this.UnscheduledOutOfService,dos);
					
					// Integer
				
						writeInteger(this.Delays,dos);
					
					// Integer
				
						writeInteger(this.Cancellations,dos);
					
					// Integer
				
						writeInteger(this.DelayedMinutes,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("aircraftID="+aircraftID);
		sb.append(",timeID="+String.valueOf(timeID));
		sb.append(",FlightHours="+String.valueOf(FlightHours));
		sb.append(",FlightCycles="+String.valueOf(FlightCycles));
		sb.append(",ScheduledOutOfService="+String.valueOf(ScheduledOutOfService));
		sb.append(",UnscheduledOutOfService="+String.valueOf(UnscheduledOutOfService));
		sb.append(",Delays="+String.valueOf(Delays));
		sb.append(",Cancellations="+String.valueOf(Cancellations));
		sb.append(",DelayedMinutes="+String.valueOf(DelayedMinutes));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(dboutStruct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.aircraftID, other.aircraftID);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.timeID, other.timeID);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class prova1Struct implements routines.system.IPersistableRow<prova1Struct> {
    final static byte[] commonByteArrayLock_DW_PROJECT2_AircraftUtilization = new byte[0];
    static byte[] commonByteArray_DW_PROJECT2_AircraftUtilization = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public String aircraftID;

				public String getAircraftID () {
					return this.aircraftID;
				}
				
			    public java.util.Date timeID;

				public java.util.Date getTimeID () {
					return this.timeID;
				}
				
			    public Integer FlightHours;

				public Integer getFlightHours () {
					return this.FlightHours;
				}
				
			    public Integer FlightCycles;

				public Integer getFlightCycles () {
					return this.FlightCycles;
				}
				
			    public Integer ScheduledOutOfService;

				public Integer getScheduledOutOfService () {
					return this.ScheduledOutOfService;
				}
				
			    public Integer UnscheduledOutOfService;

				public Integer getUnscheduledOutOfService () {
					return this.UnscheduledOutOfService;
				}
				
			    public Integer Delays;

				public Integer getDelays () {
					return this.Delays;
				}
				
			    public Integer Cancellations;

				public Integer getCancellations () {
					return this.Cancellations;
				}
				
			    public Integer DelayedMinutes;

				public Integer getDelayedMinutes () {
					return this.DelayedMinutes;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.aircraftID == null) ? 0 : this.aircraftID.hashCode());
					
						result = prime * result + ((this.timeID == null) ? 0 : this.timeID.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final prova1Struct other = (prova1Struct) obj;
		
						if (this.aircraftID == null) {
							if (other.aircraftID != null)
								return false;
						
						} else if (!this.aircraftID.equals(other.aircraftID))
						
							return false;
					
						if (this.timeID == null) {
							if (other.timeID != null)
								return false;
						
						} else if (!this.timeID.equals(other.timeID))
						
							return false;
					

		return true;
    }

	public void copyDataTo(prova1Struct other) {

		other.aircraftID = this.aircraftID;
	            other.timeID = this.timeID;
	            other.FlightHours = this.FlightHours;
	            other.FlightCycles = this.FlightCycles;
	            other.ScheduledOutOfService = this.ScheduledOutOfService;
	            other.UnscheduledOutOfService = this.UnscheduledOutOfService;
	            other.Delays = this.Delays;
	            other.Cancellations = this.Cancellations;
	            other.DelayedMinutes = this.DelayedMinutes;
	            
	}

	public void copyKeysDataTo(prova1Struct other) {

		other.aircraftID = this.aircraftID;
	            	other.timeID = this.timeID;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_DW_PROJECT2_AircraftUtilization.length) {
				if(length < 1024 && commonByteArray_DW_PROJECT2_AircraftUtilization.length == 0) {
   					commonByteArray_DW_PROJECT2_AircraftUtilization = new byte[1024];
				} else {
   					commonByteArray_DW_PROJECT2_AircraftUtilization = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_DW_PROJECT2_AircraftUtilization, 0, length);
			strReturn = new String(commonByteArray_DW_PROJECT2_AircraftUtilization, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_DW_PROJECT2_AircraftUtilization.length) {
				if(length < 1024 && commonByteArray_DW_PROJECT2_AircraftUtilization.length == 0) {
   					commonByteArray_DW_PROJECT2_AircraftUtilization = new byte[1024];
				} else {
   					commonByteArray_DW_PROJECT2_AircraftUtilization = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_DW_PROJECT2_AircraftUtilization, 0, length);
			strReturn = new String(commonByteArray_DW_PROJECT2_AircraftUtilization, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_DW_PROJECT2_AircraftUtilization) {

        	try {

        		int length = 0;
		
					this.aircraftID = readString(dis);
					
					this.timeID = readDate(dis);
					
						this.FlightHours = readInteger(dis);
					
						this.FlightCycles = readInteger(dis);
					
						this.ScheduledOutOfService = readInteger(dis);
					
						this.UnscheduledOutOfService = readInteger(dis);
					
						this.Delays = readInteger(dis);
					
						this.Cancellations = readInteger(dis);
					
						this.DelayedMinutes = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_DW_PROJECT2_AircraftUtilization) {

        	try {

        		int length = 0;
		
					this.aircraftID = readString(dis);
					
					this.timeID = readDate(dis);
					
						this.FlightHours = readInteger(dis);
					
						this.FlightCycles = readInteger(dis);
					
						this.ScheduledOutOfService = readInteger(dis);
					
						this.UnscheduledOutOfService = readInteger(dis);
					
						this.Delays = readInteger(dis);
					
						this.Cancellations = readInteger(dis);
					
						this.DelayedMinutes = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.aircraftID,dos);
					
					// java.util.Date
				
						writeDate(this.timeID,dos);
					
					// Integer
				
						writeInteger(this.FlightHours,dos);
					
					// Integer
				
						writeInteger(this.FlightCycles,dos);
					
					// Integer
				
						writeInteger(this.ScheduledOutOfService,dos);
					
					// Integer
				
						writeInteger(this.UnscheduledOutOfService,dos);
					
					// Integer
				
						writeInteger(this.Delays,dos);
					
					// Integer
				
						writeInteger(this.Cancellations,dos);
					
					// Integer
				
						writeInteger(this.DelayedMinutes,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.aircraftID,dos);
					
					// java.util.Date
				
						writeDate(this.timeID,dos);
					
					// Integer
				
						writeInteger(this.FlightHours,dos);
					
					// Integer
				
						writeInteger(this.FlightCycles,dos);
					
					// Integer
				
						writeInteger(this.ScheduledOutOfService,dos);
					
					// Integer
				
						writeInteger(this.UnscheduledOutOfService,dos);
					
					// Integer
				
						writeInteger(this.Delays,dos);
					
					// Integer
				
						writeInteger(this.Cancellations,dos);
					
					// Integer
				
						writeInteger(this.DelayedMinutes,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("aircraftID="+aircraftID);
		sb.append(",timeID="+String.valueOf(timeID));
		sb.append(",FlightHours="+String.valueOf(FlightHours));
		sb.append(",FlightCycles="+String.valueOf(FlightCycles));
		sb.append(",ScheduledOutOfService="+String.valueOf(ScheduledOutOfService));
		sb.append(",UnscheduledOutOfService="+String.valueOf(UnscheduledOutOfService));
		sb.append(",Delays="+String.valueOf(Delays));
		sb.append(",Cancellations="+String.valueOf(Cancellations));
		sb.append(",DelayedMinutes="+String.valueOf(DelayedMinutes));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(prova1Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.aircraftID, other.aircraftID);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.timeID, other.timeID);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row11Struct implements routines.system.IPersistableRow<row11Struct> {
    final static byte[] commonByteArrayLock_DW_PROJECT2_AircraftUtilization = new byte[0];
    static byte[] commonByteArray_DW_PROJECT2_AircraftUtilization = new byte[0];

	
			    public java.util.Date timeid;

				public java.util.Date getTimeid () {
					return this.timeid;
				}
				
			    public String aircraftid;

				public String getAircraftid () {
					return this.aircraftid;
				}
				
			    public Long flighthours;

				public Long getFlighthours () {
					return this.flighthours;
				}
				
			    public Long flightcycles;

				public Long getFlightcycles () {
					return this.flightcycles;
				}
				
			    public Long delays;

				public Long getDelays () {
					return this.delays;
				}
				
			    public Long cancelations;

				public Long getCancelations () {
					return this.cancelations;
				}
				
			    public Long delayedminutes;

				public Long getDelayedminutes () {
					return this.delayedminutes;
				}
				
			    public Integer uncheduled;

				public Integer getUncheduled () {
					return this.uncheduled;
				}
				
			    public Integer scheduled;

				public Integer getScheduled () {
					return this.scheduled;
				}
				



	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_DW_PROJECT2_AircraftUtilization.length) {
				if(length < 1024 && commonByteArray_DW_PROJECT2_AircraftUtilization.length == 0) {
   					commonByteArray_DW_PROJECT2_AircraftUtilization = new byte[1024];
				} else {
   					commonByteArray_DW_PROJECT2_AircraftUtilization = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_DW_PROJECT2_AircraftUtilization, 0, length);
			strReturn = new String(commonByteArray_DW_PROJECT2_AircraftUtilization, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_DW_PROJECT2_AircraftUtilization.length) {
				if(length < 1024 && commonByteArray_DW_PROJECT2_AircraftUtilization.length == 0) {
   					commonByteArray_DW_PROJECT2_AircraftUtilization = new byte[1024];
				} else {
   					commonByteArray_DW_PROJECT2_AircraftUtilization = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_DW_PROJECT2_AircraftUtilization, 0, length);
			strReturn = new String(commonByteArray_DW_PROJECT2_AircraftUtilization, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_DW_PROJECT2_AircraftUtilization) {

        	try {

        		int length = 0;
		
					this.timeid = readDate(dis);
					
					this.aircraftid = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.flighthours = null;
           				} else {
           			    	this.flighthours = dis.readLong();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.flightcycles = null;
           				} else {
           			    	this.flightcycles = dis.readLong();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.delays = null;
           				} else {
           			    	this.delays = dis.readLong();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.cancelations = null;
           				} else {
           			    	this.cancelations = dis.readLong();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.delayedminutes = null;
           				} else {
           			    	this.delayedminutes = dis.readLong();
           				}
					
						this.uncheduled = readInteger(dis);
					
						this.scheduled = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_DW_PROJECT2_AircraftUtilization) {

        	try {

        		int length = 0;
		
					this.timeid = readDate(dis);
					
					this.aircraftid = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.flighthours = null;
           				} else {
           			    	this.flighthours = dis.readLong();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.flightcycles = null;
           				} else {
           			    	this.flightcycles = dis.readLong();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.delays = null;
           				} else {
           			    	this.delays = dis.readLong();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.cancelations = null;
           				} else {
           			    	this.cancelations = dis.readLong();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.delayedminutes = null;
           				} else {
           			    	this.delayedminutes = dis.readLong();
           				}
					
						this.uncheduled = readInteger(dis);
					
						this.scheduled = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// java.util.Date
				
						writeDate(this.timeid,dos);
					
					// String
				
						writeString(this.aircraftid,dos);
					
					// Long
				
						if(this.flighthours == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.flighthours);
		            	}
					
					// Long
				
						if(this.flightcycles == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.flightcycles);
		            	}
					
					// Long
				
						if(this.delays == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.delays);
		            	}
					
					// Long
				
						if(this.cancelations == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.cancelations);
		            	}
					
					// Long
				
						if(this.delayedminutes == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.delayedminutes);
		            	}
					
					// Integer
				
						writeInteger(this.uncheduled,dos);
					
					// Integer
				
						writeInteger(this.scheduled,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// java.util.Date
				
						writeDate(this.timeid,dos);
					
					// String
				
						writeString(this.aircraftid,dos);
					
					// Long
				
						if(this.flighthours == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.flighthours);
		            	}
					
					// Long
				
						if(this.flightcycles == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.flightcycles);
		            	}
					
					// Long
				
						if(this.delays == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.delays);
		            	}
					
					// Long
				
						if(this.cancelations == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.cancelations);
		            	}
					
					// Long
				
						if(this.delayedminutes == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.delayedminutes);
		            	}
					
					// Integer
				
						writeInteger(this.uncheduled,dos);
					
					// Integer
				
						writeInteger(this.scheduled,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("timeid="+String.valueOf(timeid));
		sb.append(",aircraftid="+aircraftid);
		sb.append(",flighthours="+String.valueOf(flighthours));
		sb.append(",flightcycles="+String.valueOf(flightcycles));
		sb.append(",delays="+String.valueOf(delays));
		sb.append(",cancelations="+String.valueOf(cancelations));
		sb.append(",delayedminutes="+String.valueOf(delayedminutes));
		sb.append(",uncheduled="+String.valueOf(uncheduled));
		sb.append(",scheduled="+String.valueOf(scheduled));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row11Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class OnRowsEndStructtAggregateRow_1 implements routines.system.IPersistableRow<OnRowsEndStructtAggregateRow_1> {
    final static byte[] commonByteArrayLock_DW_PROJECT2_AircraftUtilization = new byte[0];
    static byte[] commonByteArray_DW_PROJECT2_AircraftUtilization = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public java.util.Date timeid;

				public java.util.Date getTimeid () {
					return this.timeid;
				}
				
			    public String aircraftid;

				public String getAircraftid () {
					return this.aircraftid;
				}
				
			    public Long flighthours;

				public Long getFlighthours () {
					return this.flighthours;
				}
				
			    public Long flightcycles;

				public Long getFlightcycles () {
					return this.flightcycles;
				}
				
			    public Long delays;

				public Long getDelays () {
					return this.delays;
				}
				
			    public Long cancelations;

				public Long getCancelations () {
					return this.cancelations;
				}
				
			    public Long delayedminutes;

				public Long getDelayedminutes () {
					return this.delayedminutes;
				}
				
			    public Integer uncheduled;

				public Integer getUncheduled () {
					return this.uncheduled;
				}
				
			    public Integer scheduled;

				public Integer getScheduled () {
					return this.scheduled;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.timeid == null) ? 0 : this.timeid.hashCode());
					
						result = prime * result + ((this.aircraftid == null) ? 0 : this.aircraftid.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final OnRowsEndStructtAggregateRow_1 other = (OnRowsEndStructtAggregateRow_1) obj;
		
						if (this.timeid == null) {
							if (other.timeid != null)
								return false;
						
						} else if (!this.timeid.equals(other.timeid))
						
							return false;
					
						if (this.aircraftid == null) {
							if (other.aircraftid != null)
								return false;
						
						} else if (!this.aircraftid.equals(other.aircraftid))
						
							return false;
					

		return true;
    }

	public void copyDataTo(OnRowsEndStructtAggregateRow_1 other) {

		other.timeid = this.timeid;
	            other.aircraftid = this.aircraftid;
	            other.flighthours = this.flighthours;
	            other.flightcycles = this.flightcycles;
	            other.delays = this.delays;
	            other.cancelations = this.cancelations;
	            other.delayedminutes = this.delayedminutes;
	            other.uncheduled = this.uncheduled;
	            other.scheduled = this.scheduled;
	            
	}

	public void copyKeysDataTo(OnRowsEndStructtAggregateRow_1 other) {

		other.timeid = this.timeid;
	            	other.aircraftid = this.aircraftid;
	            	
	}




	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_DW_PROJECT2_AircraftUtilization.length) {
				if(length < 1024 && commonByteArray_DW_PROJECT2_AircraftUtilization.length == 0) {
   					commonByteArray_DW_PROJECT2_AircraftUtilization = new byte[1024];
				} else {
   					commonByteArray_DW_PROJECT2_AircraftUtilization = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_DW_PROJECT2_AircraftUtilization, 0, length);
			strReturn = new String(commonByteArray_DW_PROJECT2_AircraftUtilization, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_DW_PROJECT2_AircraftUtilization.length) {
				if(length < 1024 && commonByteArray_DW_PROJECT2_AircraftUtilization.length == 0) {
   					commonByteArray_DW_PROJECT2_AircraftUtilization = new byte[1024];
				} else {
   					commonByteArray_DW_PROJECT2_AircraftUtilization = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_DW_PROJECT2_AircraftUtilization, 0, length);
			strReturn = new String(commonByteArray_DW_PROJECT2_AircraftUtilization, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_DW_PROJECT2_AircraftUtilization) {

        	try {

        		int length = 0;
		
					this.timeid = readDate(dis);
					
					this.aircraftid = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.flighthours = null;
           				} else {
           			    	this.flighthours = dis.readLong();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.flightcycles = null;
           				} else {
           			    	this.flightcycles = dis.readLong();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.delays = null;
           				} else {
           			    	this.delays = dis.readLong();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.cancelations = null;
           				} else {
           			    	this.cancelations = dis.readLong();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.delayedminutes = null;
           				} else {
           			    	this.delayedminutes = dis.readLong();
           				}
					
						this.uncheduled = readInteger(dis);
					
						this.scheduled = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_DW_PROJECT2_AircraftUtilization) {

        	try {

        		int length = 0;
		
					this.timeid = readDate(dis);
					
					this.aircraftid = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.flighthours = null;
           				} else {
           			    	this.flighthours = dis.readLong();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.flightcycles = null;
           				} else {
           			    	this.flightcycles = dis.readLong();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.delays = null;
           				} else {
           			    	this.delays = dis.readLong();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.cancelations = null;
           				} else {
           			    	this.cancelations = dis.readLong();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.delayedminutes = null;
           				} else {
           			    	this.delayedminutes = dis.readLong();
           				}
					
						this.uncheduled = readInteger(dis);
					
						this.scheduled = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// java.util.Date
				
						writeDate(this.timeid,dos);
					
					// String
				
						writeString(this.aircraftid,dos);
					
					// Long
				
						if(this.flighthours == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.flighthours);
		            	}
					
					// Long
				
						if(this.flightcycles == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.flightcycles);
		            	}
					
					// Long
				
						if(this.delays == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.delays);
		            	}
					
					// Long
				
						if(this.cancelations == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.cancelations);
		            	}
					
					// Long
				
						if(this.delayedminutes == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.delayedminutes);
		            	}
					
					// Integer
				
						writeInteger(this.uncheduled,dos);
					
					// Integer
				
						writeInteger(this.scheduled,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// java.util.Date
				
						writeDate(this.timeid,dos);
					
					// String
				
						writeString(this.aircraftid,dos);
					
					// Long
				
						if(this.flighthours == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.flighthours);
		            	}
					
					// Long
				
						if(this.flightcycles == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.flightcycles);
		            	}
					
					// Long
				
						if(this.delays == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.delays);
		            	}
					
					// Long
				
						if(this.cancelations == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.cancelations);
		            	}
					
					// Long
				
						if(this.delayedminutes == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.delayedminutes);
		            	}
					
					// Integer
				
						writeInteger(this.uncheduled,dos);
					
					// Integer
				
						writeInteger(this.scheduled,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("timeid="+String.valueOf(timeid));
		sb.append(",aircraftid="+aircraftid);
		sb.append(",flighthours="+String.valueOf(flighthours));
		sb.append(",flightcycles="+String.valueOf(flightcycles));
		sb.append(",delays="+String.valueOf(delays));
		sb.append(",cancelations="+String.valueOf(cancelations));
		sb.append(",delayedminutes="+String.valueOf(delayedminutes));
		sb.append(",uncheduled="+String.valueOf(uncheduled));
		sb.append(",scheduled="+String.valueOf(scheduled));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(OnRowsEndStructtAggregateRow_1 other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.timeid, other.timeid);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.aircraftid, other.aircraftid);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row10Struct implements routines.system.IPersistableRow<row10Struct> {
    final static byte[] commonByteArrayLock_DW_PROJECT2_AircraftUtilization = new byte[0];
    static byte[] commonByteArray_DW_PROJECT2_AircraftUtilization = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public java.util.Date timeid;

				public java.util.Date getTimeid () {
					return this.timeid;
				}
				
			    public String aircraftid;

				public String getAircraftid () {
					return this.aircraftid;
				}
				
			    public Long flighthours;

				public Long getFlighthours () {
					return this.flighthours;
				}
				
			    public Long flightcycles;

				public Long getFlightcycles () {
					return this.flightcycles;
				}
				
			    public Long delays;

				public Long getDelays () {
					return this.delays;
				}
				
			    public Long cancelations;

				public Long getCancelations () {
					return this.cancelations;
				}
				
			    public Long delayedminutes;

				public Long getDelayedminutes () {
					return this.delayedminutes;
				}
				
			    public Integer uncheduled;

				public Integer getUncheduled () {
					return this.uncheduled;
				}
				
			    public Integer scheduled;

				public Integer getScheduled () {
					return this.scheduled;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.timeid == null) ? 0 : this.timeid.hashCode());
					
						result = prime * result + ((this.aircraftid == null) ? 0 : this.aircraftid.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row10Struct other = (row10Struct) obj;
		
						if (this.timeid == null) {
							if (other.timeid != null)
								return false;
						
						} else if (!this.timeid.equals(other.timeid))
						
							return false;
					
						if (this.aircraftid == null) {
							if (other.aircraftid != null)
								return false;
						
						} else if (!this.aircraftid.equals(other.aircraftid))
						
							return false;
					

		return true;
    }

	public void copyDataTo(row10Struct other) {

		other.timeid = this.timeid;
	            other.aircraftid = this.aircraftid;
	            other.flighthours = this.flighthours;
	            other.flightcycles = this.flightcycles;
	            other.delays = this.delays;
	            other.cancelations = this.cancelations;
	            other.delayedminutes = this.delayedminutes;
	            other.uncheduled = this.uncheduled;
	            other.scheduled = this.scheduled;
	            
	}

	public void copyKeysDataTo(row10Struct other) {

		other.timeid = this.timeid;
	            	other.aircraftid = this.aircraftid;
	            	
	}




	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_DW_PROJECT2_AircraftUtilization.length) {
				if(length < 1024 && commonByteArray_DW_PROJECT2_AircraftUtilization.length == 0) {
   					commonByteArray_DW_PROJECT2_AircraftUtilization = new byte[1024];
				} else {
   					commonByteArray_DW_PROJECT2_AircraftUtilization = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_DW_PROJECT2_AircraftUtilization, 0, length);
			strReturn = new String(commonByteArray_DW_PROJECT2_AircraftUtilization, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_DW_PROJECT2_AircraftUtilization.length) {
				if(length < 1024 && commonByteArray_DW_PROJECT2_AircraftUtilization.length == 0) {
   					commonByteArray_DW_PROJECT2_AircraftUtilization = new byte[1024];
				} else {
   					commonByteArray_DW_PROJECT2_AircraftUtilization = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_DW_PROJECT2_AircraftUtilization, 0, length);
			strReturn = new String(commonByteArray_DW_PROJECT2_AircraftUtilization, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_DW_PROJECT2_AircraftUtilization) {

        	try {

        		int length = 0;
		
					this.timeid = readDate(dis);
					
					this.aircraftid = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.flighthours = null;
           				} else {
           			    	this.flighthours = dis.readLong();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.flightcycles = null;
           				} else {
           			    	this.flightcycles = dis.readLong();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.delays = null;
           				} else {
           			    	this.delays = dis.readLong();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.cancelations = null;
           				} else {
           			    	this.cancelations = dis.readLong();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.delayedminutes = null;
           				} else {
           			    	this.delayedminutes = dis.readLong();
           				}
					
						this.uncheduled = readInteger(dis);
					
						this.scheduled = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_DW_PROJECT2_AircraftUtilization) {

        	try {

        		int length = 0;
		
					this.timeid = readDate(dis);
					
					this.aircraftid = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.flighthours = null;
           				} else {
           			    	this.flighthours = dis.readLong();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.flightcycles = null;
           				} else {
           			    	this.flightcycles = dis.readLong();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.delays = null;
           				} else {
           			    	this.delays = dis.readLong();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.cancelations = null;
           				} else {
           			    	this.cancelations = dis.readLong();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.delayedminutes = null;
           				} else {
           			    	this.delayedminutes = dis.readLong();
           				}
					
						this.uncheduled = readInteger(dis);
					
						this.scheduled = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// java.util.Date
				
						writeDate(this.timeid,dos);
					
					// String
				
						writeString(this.aircraftid,dos);
					
					// Long
				
						if(this.flighthours == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.flighthours);
		            	}
					
					// Long
				
						if(this.flightcycles == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.flightcycles);
		            	}
					
					// Long
				
						if(this.delays == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.delays);
		            	}
					
					// Long
				
						if(this.cancelations == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.cancelations);
		            	}
					
					// Long
				
						if(this.delayedminutes == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.delayedminutes);
		            	}
					
					// Integer
				
						writeInteger(this.uncheduled,dos);
					
					// Integer
				
						writeInteger(this.scheduled,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// java.util.Date
				
						writeDate(this.timeid,dos);
					
					// String
				
						writeString(this.aircraftid,dos);
					
					// Long
				
						if(this.flighthours == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.flighthours);
		            	}
					
					// Long
				
						if(this.flightcycles == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.flightcycles);
		            	}
					
					// Long
				
						if(this.delays == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.delays);
		            	}
					
					// Long
				
						if(this.cancelations == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.cancelations);
		            	}
					
					// Long
				
						if(this.delayedminutes == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.delayedminutes);
		            	}
					
					// Integer
				
						writeInteger(this.uncheduled,dos);
					
					// Integer
				
						writeInteger(this.scheduled,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("timeid="+String.valueOf(timeid));
		sb.append(",aircraftid="+aircraftid);
		sb.append(",flighthours="+String.valueOf(flighthours));
		sb.append(",flightcycles="+String.valueOf(flightcycles));
		sb.append(",delays="+String.valueOf(delays));
		sb.append(",cancelations="+String.valueOf(cancelations));
		sb.append(",delayedminutes="+String.valueOf(delayedminutes));
		sb.append(",uncheduled="+String.valueOf(uncheduled));
		sb.append(",scheduled="+String.valueOf(scheduled));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row10Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.timeid, other.timeid);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.aircraftid, other.aircraftid);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class tmapStruct implements routines.system.IPersistableRow<tmapStruct> {
    final static byte[] commonByteArrayLock_DW_PROJECT2_AircraftUtilization = new byte[0];
    static byte[] commonByteArray_DW_PROJECT2_AircraftUtilization = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public java.util.Date timeid;

				public java.util.Date getTimeid () {
					return this.timeid;
				}
				
			    public String aircraftid;

				public String getAircraftid () {
					return this.aircraftid;
				}
				
			    public Long flighthours;

				public Long getFlighthours () {
					return this.flighthours;
				}
				
			    public Long flightcycles;

				public Long getFlightcycles () {
					return this.flightcycles;
				}
				
			    public Long delays;

				public Long getDelays () {
					return this.delays;
				}
				
			    public Long cancelations;

				public Long getCancelations () {
					return this.cancelations;
				}
				
			    public Long delayedminutes;

				public Long getDelayedminutes () {
					return this.delayedminutes;
				}
				
			    public Integer uncheduled;

				public Integer getUncheduled () {
					return this.uncheduled;
				}
				
			    public Integer scheduled;

				public Integer getScheduled () {
					return this.scheduled;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.timeid == null) ? 0 : this.timeid.hashCode());
					
						result = prime * result + ((this.aircraftid == null) ? 0 : this.aircraftid.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final tmapStruct other = (tmapStruct) obj;
		
						if (this.timeid == null) {
							if (other.timeid != null)
								return false;
						
						} else if (!this.timeid.equals(other.timeid))
						
							return false;
					
						if (this.aircraftid == null) {
							if (other.aircraftid != null)
								return false;
						
						} else if (!this.aircraftid.equals(other.aircraftid))
						
							return false;
					

		return true;
    }

	public void copyDataTo(tmapStruct other) {

		other.timeid = this.timeid;
	            other.aircraftid = this.aircraftid;
	            other.flighthours = this.flighthours;
	            other.flightcycles = this.flightcycles;
	            other.delays = this.delays;
	            other.cancelations = this.cancelations;
	            other.delayedminutes = this.delayedminutes;
	            other.uncheduled = this.uncheduled;
	            other.scheduled = this.scheduled;
	            
	}

	public void copyKeysDataTo(tmapStruct other) {

		other.timeid = this.timeid;
	            	other.aircraftid = this.aircraftid;
	            	
	}




	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_DW_PROJECT2_AircraftUtilization.length) {
				if(length < 1024 && commonByteArray_DW_PROJECT2_AircraftUtilization.length == 0) {
   					commonByteArray_DW_PROJECT2_AircraftUtilization = new byte[1024];
				} else {
   					commonByteArray_DW_PROJECT2_AircraftUtilization = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_DW_PROJECT2_AircraftUtilization, 0, length);
			strReturn = new String(commonByteArray_DW_PROJECT2_AircraftUtilization, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_DW_PROJECT2_AircraftUtilization.length) {
				if(length < 1024 && commonByteArray_DW_PROJECT2_AircraftUtilization.length == 0) {
   					commonByteArray_DW_PROJECT2_AircraftUtilization = new byte[1024];
				} else {
   					commonByteArray_DW_PROJECT2_AircraftUtilization = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_DW_PROJECT2_AircraftUtilization, 0, length);
			strReturn = new String(commonByteArray_DW_PROJECT2_AircraftUtilization, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_DW_PROJECT2_AircraftUtilization) {

        	try {

        		int length = 0;
		
					this.timeid = readDate(dis);
					
					this.aircraftid = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.flighthours = null;
           				} else {
           			    	this.flighthours = dis.readLong();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.flightcycles = null;
           				} else {
           			    	this.flightcycles = dis.readLong();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.delays = null;
           				} else {
           			    	this.delays = dis.readLong();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.cancelations = null;
           				} else {
           			    	this.cancelations = dis.readLong();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.delayedminutes = null;
           				} else {
           			    	this.delayedminutes = dis.readLong();
           				}
					
						this.uncheduled = readInteger(dis);
					
						this.scheduled = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_DW_PROJECT2_AircraftUtilization) {

        	try {

        		int length = 0;
		
					this.timeid = readDate(dis);
					
					this.aircraftid = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.flighthours = null;
           				} else {
           			    	this.flighthours = dis.readLong();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.flightcycles = null;
           				} else {
           			    	this.flightcycles = dis.readLong();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.delays = null;
           				} else {
           			    	this.delays = dis.readLong();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.cancelations = null;
           				} else {
           			    	this.cancelations = dis.readLong();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.delayedminutes = null;
           				} else {
           			    	this.delayedminutes = dis.readLong();
           				}
					
						this.uncheduled = readInteger(dis);
					
						this.scheduled = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// java.util.Date
				
						writeDate(this.timeid,dos);
					
					// String
				
						writeString(this.aircraftid,dos);
					
					// Long
				
						if(this.flighthours == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.flighthours);
		            	}
					
					// Long
				
						if(this.flightcycles == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.flightcycles);
		            	}
					
					// Long
				
						if(this.delays == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.delays);
		            	}
					
					// Long
				
						if(this.cancelations == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.cancelations);
		            	}
					
					// Long
				
						if(this.delayedminutes == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.delayedminutes);
		            	}
					
					// Integer
				
						writeInteger(this.uncheduled,dos);
					
					// Integer
				
						writeInteger(this.scheduled,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// java.util.Date
				
						writeDate(this.timeid,dos);
					
					// String
				
						writeString(this.aircraftid,dos);
					
					// Long
				
						if(this.flighthours == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.flighthours);
		            	}
					
					// Long
				
						if(this.flightcycles == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.flightcycles);
		            	}
					
					// Long
				
						if(this.delays == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.delays);
		            	}
					
					// Long
				
						if(this.cancelations == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.cancelations);
		            	}
					
					// Long
				
						if(this.delayedminutes == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.delayedminutes);
		            	}
					
					// Integer
				
						writeInteger(this.uncheduled,dos);
					
					// Integer
				
						writeInteger(this.scheduled,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("timeid="+String.valueOf(timeid));
		sb.append(",aircraftid="+aircraftid);
		sb.append(",flighthours="+String.valueOf(flighthours));
		sb.append(",flightcycles="+String.valueOf(flightcycles));
		sb.append(",delays="+String.valueOf(delays));
		sb.append(",cancelations="+String.valueOf(cancelations));
		sb.append(",delayedminutes="+String.valueOf(delayedminutes));
		sb.append(",uncheduled="+String.valueOf(uncheduled));
		sb.append(",scheduled="+String.valueOf(scheduled));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(tmapStruct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.timeid, other.timeid);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.aircraftid, other.aircraftid);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row9Struct implements routines.system.IPersistableRow<row9Struct> {
    final static byte[] commonByteArrayLock_DW_PROJECT2_AircraftUtilization = new byte[0];
    static byte[] commonByteArray_DW_PROJECT2_AircraftUtilization = new byte[0];

	
			    public java.util.Date timeid;

				public java.util.Date getTimeid () {
					return this.timeid;
				}
				
			    public String aircraftid;

				public String getAircraftid () {
					return this.aircraftid;
				}
				
			    public Long flighthours;

				public Long getFlighthours () {
					return this.flighthours;
				}
				
			    public Long flightcycles;

				public Long getFlightcycles () {
					return this.flightcycles;
				}
				
			    public Long delays;

				public Long getDelays () {
					return this.delays;
				}
				
			    public Long cancelations;

				public Long getCancelations () {
					return this.cancelations;
				}
				
			    public Long delayedminutes;

				public Long getDelayedminutes () {
					return this.delayedminutes;
				}
				



	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_DW_PROJECT2_AircraftUtilization.length) {
				if(length < 1024 && commonByteArray_DW_PROJECT2_AircraftUtilization.length == 0) {
   					commonByteArray_DW_PROJECT2_AircraftUtilization = new byte[1024];
				} else {
   					commonByteArray_DW_PROJECT2_AircraftUtilization = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_DW_PROJECT2_AircraftUtilization, 0, length);
			strReturn = new String(commonByteArray_DW_PROJECT2_AircraftUtilization, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_DW_PROJECT2_AircraftUtilization.length) {
				if(length < 1024 && commonByteArray_DW_PROJECT2_AircraftUtilization.length == 0) {
   					commonByteArray_DW_PROJECT2_AircraftUtilization = new byte[1024];
				} else {
   					commonByteArray_DW_PROJECT2_AircraftUtilization = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_DW_PROJECT2_AircraftUtilization, 0, length);
			strReturn = new String(commonByteArray_DW_PROJECT2_AircraftUtilization, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_DW_PROJECT2_AircraftUtilization) {

        	try {

        		int length = 0;
		
					this.timeid = readDate(dis);
					
					this.aircraftid = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.flighthours = null;
           				} else {
           			    	this.flighthours = dis.readLong();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.flightcycles = null;
           				} else {
           			    	this.flightcycles = dis.readLong();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.delays = null;
           				} else {
           			    	this.delays = dis.readLong();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.cancelations = null;
           				} else {
           			    	this.cancelations = dis.readLong();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.delayedminutes = null;
           				} else {
           			    	this.delayedminutes = dis.readLong();
           				}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_DW_PROJECT2_AircraftUtilization) {

        	try {

        		int length = 0;
		
					this.timeid = readDate(dis);
					
					this.aircraftid = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.flighthours = null;
           				} else {
           			    	this.flighthours = dis.readLong();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.flightcycles = null;
           				} else {
           			    	this.flightcycles = dis.readLong();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.delays = null;
           				} else {
           			    	this.delays = dis.readLong();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.cancelations = null;
           				} else {
           			    	this.cancelations = dis.readLong();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.delayedminutes = null;
           				} else {
           			    	this.delayedminutes = dis.readLong();
           				}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// java.util.Date
				
						writeDate(this.timeid,dos);
					
					// String
				
						writeString(this.aircraftid,dos);
					
					// Long
				
						if(this.flighthours == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.flighthours);
		            	}
					
					// Long
				
						if(this.flightcycles == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.flightcycles);
		            	}
					
					// Long
				
						if(this.delays == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.delays);
		            	}
					
					// Long
				
						if(this.cancelations == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.cancelations);
		            	}
					
					// Long
				
						if(this.delayedminutes == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.delayedminutes);
		            	}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// java.util.Date
				
						writeDate(this.timeid,dos);
					
					// String
				
						writeString(this.aircraftid,dos);
					
					// Long
				
						if(this.flighthours == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.flighthours);
		            	}
					
					// Long
				
						if(this.flightcycles == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.flightcycles);
		            	}
					
					// Long
				
						if(this.delays == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.delays);
		            	}
					
					// Long
				
						if(this.cancelations == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.cancelations);
		            	}
					
					// Long
				
						if(this.delayedminutes == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.delayedminutes);
		            	}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("timeid="+String.valueOf(timeid));
		sb.append(",aircraftid="+aircraftid);
		sb.append(",flighthours="+String.valueOf(flighthours));
		sb.append(",flightcycles="+String.valueOf(flightcycles));
		sb.append(",delays="+String.valueOf(delays));
		sb.append(",cancelations="+String.valueOf(cancelations));
		sb.append(",delayedminutes="+String.valueOf(delayedminutes));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row9Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class aStruct implements routines.system.IPersistableRow<aStruct> {
    final static byte[] commonByteArrayLock_DW_PROJECT2_AircraftUtilization = new byte[0];
    static byte[] commonByteArray_DW_PROJECT2_AircraftUtilization = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public java.util.Date timeid;

				public java.util.Date getTimeid () {
					return this.timeid;
				}
				
			    public String aircraftid;

				public String getAircraftid () {
					return this.aircraftid;
				}
				
			    public Long flighthours;

				public Long getFlighthours () {
					return this.flighthours;
				}
				
			    public Long flightcycles;

				public Long getFlightcycles () {
					return this.flightcycles;
				}
				
			    public Long delays;

				public Long getDelays () {
					return this.delays;
				}
				
			    public Long cancelations;

				public Long getCancelations () {
					return this.cancelations;
				}
				
			    public Long delayedminutes;

				public Long getDelayedminutes () {
					return this.delayedminutes;
				}
				
			    public int scheduled;

				public int getScheduled () {
					return this.scheduled;
				}
				
			    public int uncheduled;

				public int getUncheduled () {
					return this.uncheduled;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.timeid == null) ? 0 : this.timeid.hashCode());
					
						result = prime * result + ((this.aircraftid == null) ? 0 : this.aircraftid.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final aStruct other = (aStruct) obj;
		
						if (this.timeid == null) {
							if (other.timeid != null)
								return false;
						
						} else if (!this.timeid.equals(other.timeid))
						
							return false;
					
						if (this.aircraftid == null) {
							if (other.aircraftid != null)
								return false;
						
						} else if (!this.aircraftid.equals(other.aircraftid))
						
							return false;
					

		return true;
    }

	public void copyDataTo(aStruct other) {

		other.timeid = this.timeid;
	            other.aircraftid = this.aircraftid;
	            other.flighthours = this.flighthours;
	            other.flightcycles = this.flightcycles;
	            other.delays = this.delays;
	            other.cancelations = this.cancelations;
	            other.delayedminutes = this.delayedminutes;
	            other.scheduled = this.scheduled;
	            other.uncheduled = this.uncheduled;
	            
	}

	public void copyKeysDataTo(aStruct other) {

		other.timeid = this.timeid;
	            	other.aircraftid = this.aircraftid;
	            	
	}




	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_DW_PROJECT2_AircraftUtilization.length) {
				if(length < 1024 && commonByteArray_DW_PROJECT2_AircraftUtilization.length == 0) {
   					commonByteArray_DW_PROJECT2_AircraftUtilization = new byte[1024];
				} else {
   					commonByteArray_DW_PROJECT2_AircraftUtilization = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_DW_PROJECT2_AircraftUtilization, 0, length);
			strReturn = new String(commonByteArray_DW_PROJECT2_AircraftUtilization, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_DW_PROJECT2_AircraftUtilization.length) {
				if(length < 1024 && commonByteArray_DW_PROJECT2_AircraftUtilization.length == 0) {
   					commonByteArray_DW_PROJECT2_AircraftUtilization = new byte[1024];
				} else {
   					commonByteArray_DW_PROJECT2_AircraftUtilization = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_DW_PROJECT2_AircraftUtilization, 0, length);
			strReturn = new String(commonByteArray_DW_PROJECT2_AircraftUtilization, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_DW_PROJECT2_AircraftUtilization) {

        	try {

        		int length = 0;
		
					this.timeid = readDate(dis);
					
					this.aircraftid = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.flighthours = null;
           				} else {
           			    	this.flighthours = dis.readLong();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.flightcycles = null;
           				} else {
           			    	this.flightcycles = dis.readLong();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.delays = null;
           				} else {
           			    	this.delays = dis.readLong();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.cancelations = null;
           				} else {
           			    	this.cancelations = dis.readLong();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.delayedminutes = null;
           				} else {
           			    	this.delayedminutes = dis.readLong();
           				}
					
			        this.scheduled = dis.readInt();
					
			        this.uncheduled = dis.readInt();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_DW_PROJECT2_AircraftUtilization) {

        	try {

        		int length = 0;
		
					this.timeid = readDate(dis);
					
					this.aircraftid = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.flighthours = null;
           				} else {
           			    	this.flighthours = dis.readLong();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.flightcycles = null;
           				} else {
           			    	this.flightcycles = dis.readLong();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.delays = null;
           				} else {
           			    	this.delays = dis.readLong();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.cancelations = null;
           				} else {
           			    	this.cancelations = dis.readLong();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.delayedminutes = null;
           				} else {
           			    	this.delayedminutes = dis.readLong();
           				}
					
			        this.scheduled = dis.readInt();
					
			        this.uncheduled = dis.readInt();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// java.util.Date
				
						writeDate(this.timeid,dos);
					
					// String
				
						writeString(this.aircraftid,dos);
					
					// Long
				
						if(this.flighthours == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.flighthours);
		            	}
					
					// Long
				
						if(this.flightcycles == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.flightcycles);
		            	}
					
					// Long
				
						if(this.delays == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.delays);
		            	}
					
					// Long
				
						if(this.cancelations == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.cancelations);
		            	}
					
					// Long
				
						if(this.delayedminutes == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.delayedminutes);
		            	}
					
					// int
				
		            	dos.writeInt(this.scheduled);
					
					// int
				
		            	dos.writeInt(this.uncheduled);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// java.util.Date
				
						writeDate(this.timeid,dos);
					
					// String
				
						writeString(this.aircraftid,dos);
					
					// Long
				
						if(this.flighthours == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.flighthours);
		            	}
					
					// Long
				
						if(this.flightcycles == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.flightcycles);
		            	}
					
					// Long
				
						if(this.delays == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.delays);
		            	}
					
					// Long
				
						if(this.cancelations == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.cancelations);
		            	}
					
					// Long
				
						if(this.delayedminutes == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.delayedminutes);
		            	}
					
					// int
				
		            	dos.writeInt(this.scheduled);
					
					// int
				
		            	dos.writeInt(this.uncheduled);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("timeid="+String.valueOf(timeid));
		sb.append(",aircraftid="+aircraftid);
		sb.append(",flighthours="+String.valueOf(flighthours));
		sb.append(",flightcycles="+String.valueOf(flightcycles));
		sb.append(",delays="+String.valueOf(delays));
		sb.append(",cancelations="+String.valueOf(cancelations));
		sb.append(",delayedminutes="+String.valueOf(delayedminutes));
		sb.append(",scheduled="+String.valueOf(scheduled));
		sb.append(",uncheduled="+String.valueOf(uncheduled));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(aStruct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.timeid, other.timeid);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.aircraftid, other.aircraftid);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row8Struct implements routines.system.IPersistableRow<row8Struct> {
    final static byte[] commonByteArrayLock_DW_PROJECT2_AircraftUtilization = new byte[0];
    static byte[] commonByteArray_DW_PROJECT2_AircraftUtilization = new byte[0];

	
			    public java.util.Date yearmonth;

				public java.util.Date getYearmonth () {
					return this.yearmonth;
				}
				
			    public String aircraftregistration;

				public String getAircraftregistration () {
					return this.aircraftregistration;
				}
				
			    public int scheduledhours;

				public int getScheduledhours () {
					return this.scheduledhours;
				}
				
			    public int unscheduledhours;

				public int getUnscheduledhours () {
					return this.unscheduledhours;
				}
				



	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_DW_PROJECT2_AircraftUtilization.length) {
				if(length < 1024 && commonByteArray_DW_PROJECT2_AircraftUtilization.length == 0) {
   					commonByteArray_DW_PROJECT2_AircraftUtilization = new byte[1024];
				} else {
   					commonByteArray_DW_PROJECT2_AircraftUtilization = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_DW_PROJECT2_AircraftUtilization, 0, length);
			strReturn = new String(commonByteArray_DW_PROJECT2_AircraftUtilization, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_DW_PROJECT2_AircraftUtilization.length) {
				if(length < 1024 && commonByteArray_DW_PROJECT2_AircraftUtilization.length == 0) {
   					commonByteArray_DW_PROJECT2_AircraftUtilization = new byte[1024];
				} else {
   					commonByteArray_DW_PROJECT2_AircraftUtilization = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_DW_PROJECT2_AircraftUtilization, 0, length);
			strReturn = new String(commonByteArray_DW_PROJECT2_AircraftUtilization, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_DW_PROJECT2_AircraftUtilization) {

        	try {

        		int length = 0;
		
					this.yearmonth = readDate(dis);
					
					this.aircraftregistration = readString(dis);
					
			        this.scheduledhours = dis.readInt();
					
			        this.unscheduledhours = dis.readInt();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_DW_PROJECT2_AircraftUtilization) {

        	try {

        		int length = 0;
		
					this.yearmonth = readDate(dis);
					
					this.aircraftregistration = readString(dis);
					
			        this.scheduledhours = dis.readInt();
					
			        this.unscheduledhours = dis.readInt();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// java.util.Date
				
						writeDate(this.yearmonth,dos);
					
					// String
				
						writeString(this.aircraftregistration,dos);
					
					// int
				
		            	dos.writeInt(this.scheduledhours);
					
					// int
				
		            	dos.writeInt(this.unscheduledhours);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// java.util.Date
				
						writeDate(this.yearmonth,dos);
					
					// String
				
						writeString(this.aircraftregistration,dos);
					
					// int
				
		            	dos.writeInt(this.scheduledhours);
					
					// int
				
		            	dos.writeInt(this.unscheduledhours);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("yearmonth="+String.valueOf(yearmonth));
		sb.append(",aircraftregistration="+aircraftregistration);
		sb.append(",scheduledhours="+String.valueOf(scheduledhours));
		sb.append(",unscheduledhours="+String.valueOf(unscheduledhours));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row8Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class filterStruct implements routines.system.IPersistableRow<filterStruct> {
    final static byte[] commonByteArrayLock_DW_PROJECT2_AircraftUtilization = new byte[0];
    static byte[] commonByteArray_DW_PROJECT2_AircraftUtilization = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public java.util.Date yearmonth;

				public java.util.Date getYearmonth () {
					return this.yearmonth;
				}
				
			    public String aircraftregistration;

				public String getAircraftregistration () {
					return this.aircraftregistration;
				}
				
			    public int scheduledhours;

				public int getScheduledhours () {
					return this.scheduledhours;
				}
				
			    public int unscheduledhours;

				public int getUnscheduledhours () {
					return this.unscheduledhours;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.yearmonth == null) ? 0 : this.yearmonth.hashCode());
					
						result = prime * result + ((this.aircraftregistration == null) ? 0 : this.aircraftregistration.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final filterStruct other = (filterStruct) obj;
		
						if (this.yearmonth == null) {
							if (other.yearmonth != null)
								return false;
						
						} else if (!this.yearmonth.equals(other.yearmonth))
						
							return false;
					
						if (this.aircraftregistration == null) {
							if (other.aircraftregistration != null)
								return false;
						
						} else if (!this.aircraftregistration.equals(other.aircraftregistration))
						
							return false;
					

		return true;
    }

	public void copyDataTo(filterStruct other) {

		other.yearmonth = this.yearmonth;
	            other.aircraftregistration = this.aircraftregistration;
	            other.scheduledhours = this.scheduledhours;
	            other.unscheduledhours = this.unscheduledhours;
	            
	}

	public void copyKeysDataTo(filterStruct other) {

		other.yearmonth = this.yearmonth;
	            	other.aircraftregistration = this.aircraftregistration;
	            	
	}




	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_DW_PROJECT2_AircraftUtilization.length) {
				if(length < 1024 && commonByteArray_DW_PROJECT2_AircraftUtilization.length == 0) {
   					commonByteArray_DW_PROJECT2_AircraftUtilization = new byte[1024];
				} else {
   					commonByteArray_DW_PROJECT2_AircraftUtilization = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_DW_PROJECT2_AircraftUtilization, 0, length);
			strReturn = new String(commonByteArray_DW_PROJECT2_AircraftUtilization, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_DW_PROJECT2_AircraftUtilization.length) {
				if(length < 1024 && commonByteArray_DW_PROJECT2_AircraftUtilization.length == 0) {
   					commonByteArray_DW_PROJECT2_AircraftUtilization = new byte[1024];
				} else {
   					commonByteArray_DW_PROJECT2_AircraftUtilization = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_DW_PROJECT2_AircraftUtilization, 0, length);
			strReturn = new String(commonByteArray_DW_PROJECT2_AircraftUtilization, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_DW_PROJECT2_AircraftUtilization) {

        	try {

        		int length = 0;
		
					this.yearmonth = readDate(dis);
					
					this.aircraftregistration = readString(dis);
					
			        this.scheduledhours = dis.readInt();
					
			        this.unscheduledhours = dis.readInt();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_DW_PROJECT2_AircraftUtilization) {

        	try {

        		int length = 0;
		
					this.yearmonth = readDate(dis);
					
					this.aircraftregistration = readString(dis);
					
			        this.scheduledhours = dis.readInt();
					
			        this.unscheduledhours = dis.readInt();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// java.util.Date
				
						writeDate(this.yearmonth,dos);
					
					// String
				
						writeString(this.aircraftregistration,dos);
					
					// int
				
		            	dos.writeInt(this.scheduledhours);
					
					// int
				
		            	dos.writeInt(this.unscheduledhours);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// java.util.Date
				
						writeDate(this.yearmonth,dos);
					
					// String
				
						writeString(this.aircraftregistration,dos);
					
					// int
				
		            	dos.writeInt(this.scheduledhours);
					
					// int
				
		            	dos.writeInt(this.unscheduledhours);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("yearmonth="+String.valueOf(yearmonth));
		sb.append(",aircraftregistration="+aircraftregistration);
		sb.append(",scheduledhours="+String.valueOf(scheduledhours));
		sb.append(",unscheduledhours="+String.valueOf(unscheduledhours));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(filterStruct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.yearmonth, other.yearmonth);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.aircraftregistration, other.aircraftregistration);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row3Struct implements routines.system.IPersistableRow<row3Struct> {
    final static byte[] commonByteArrayLock_DW_PROJECT2_AircraftUtilization = new byte[0];
    static byte[] commonByteArray_DW_PROJECT2_AircraftUtilization = new byte[0];

	
			    public String aircraftregistration;

				public String getAircraftregistration () {
					return this.aircraftregistration;
				}
				
			    public String yearmonth;

				public String getYearmonth () {
					return this.yearmonth;
				}
				
			    public Double scheduledhours;

				public Double getScheduledhours () {
					return this.scheduledhours;
				}
				
			    public Double unscheduledhours;

				public Double getUnscheduledhours () {
					return this.unscheduledhours;
				}
				
			    public Double unscheduledhours2;

				public Double getUnscheduledhours2 () {
					return this.unscheduledhours2;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_DW_PROJECT2_AircraftUtilization.length) {
				if(length < 1024 && commonByteArray_DW_PROJECT2_AircraftUtilization.length == 0) {
   					commonByteArray_DW_PROJECT2_AircraftUtilization = new byte[1024];
				} else {
   					commonByteArray_DW_PROJECT2_AircraftUtilization = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_DW_PROJECT2_AircraftUtilization, 0, length);
			strReturn = new String(commonByteArray_DW_PROJECT2_AircraftUtilization, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_DW_PROJECT2_AircraftUtilization.length) {
				if(length < 1024 && commonByteArray_DW_PROJECT2_AircraftUtilization.length == 0) {
   					commonByteArray_DW_PROJECT2_AircraftUtilization = new byte[1024];
				} else {
   					commonByteArray_DW_PROJECT2_AircraftUtilization = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_DW_PROJECT2_AircraftUtilization, 0, length);
			strReturn = new String(commonByteArray_DW_PROJECT2_AircraftUtilization, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_DW_PROJECT2_AircraftUtilization) {

        	try {

        		int length = 0;
		
					this.aircraftregistration = readString(dis);
					
					this.yearmonth = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.scheduledhours = null;
           				} else {
           			    	this.scheduledhours = dis.readDouble();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.unscheduledhours = null;
           				} else {
           			    	this.unscheduledhours = dis.readDouble();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.unscheduledhours2 = null;
           				} else {
           			    	this.unscheduledhours2 = dis.readDouble();
           				}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_DW_PROJECT2_AircraftUtilization) {

        	try {

        		int length = 0;
		
					this.aircraftregistration = readString(dis);
					
					this.yearmonth = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.scheduledhours = null;
           				} else {
           			    	this.scheduledhours = dis.readDouble();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.unscheduledhours = null;
           				} else {
           			    	this.unscheduledhours = dis.readDouble();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.unscheduledhours2 = null;
           				} else {
           			    	this.unscheduledhours2 = dis.readDouble();
           				}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.aircraftregistration,dos);
					
					// String
				
						writeString(this.yearmonth,dos);
					
					// Double
				
						if(this.scheduledhours == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.scheduledhours);
		            	}
					
					// Double
				
						if(this.unscheduledhours == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.unscheduledhours);
		            	}
					
					// Double
				
						if(this.unscheduledhours2 == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.unscheduledhours2);
		            	}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.aircraftregistration,dos);
					
					// String
				
						writeString(this.yearmonth,dos);
					
					// Double
				
						if(this.scheduledhours == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.scheduledhours);
		            	}
					
					// Double
				
						if(this.unscheduledhours == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.unscheduledhours);
		            	}
					
					// Double
				
						if(this.unscheduledhours2 == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.unscheduledhours2);
		            	}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("aircraftregistration="+aircraftregistration);
		sb.append(",yearmonth="+yearmonth);
		sb.append(",scheduledhours="+String.valueOf(scheduledhours));
		sb.append(",unscheduledhours="+String.valueOf(unscheduledhours));
		sb.append(",unscheduledhours2="+String.valueOf(unscheduledhours2));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row3Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row1Struct implements routines.system.IPersistableRow<row1Struct> {
    final static byte[] commonByteArrayLock_DW_PROJECT2_AircraftUtilization = new byte[0];
    static byte[] commonByteArray_DW_PROJECT2_AircraftUtilization = new byte[0];

	
			    public String aircraftregistration;

				public String getAircraftregistration () {
					return this.aircraftregistration;
				}
				
			    public String yearmonth;

				public String getYearmonth () {
					return this.yearmonth;
				}
				
			    public Double scheduledhours;

				public Double getScheduledhours () {
					return this.scheduledhours;
				}
				
			    public Double unscheduledhours;

				public Double getUnscheduledhours () {
					return this.unscheduledhours;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_DW_PROJECT2_AircraftUtilization.length) {
				if(length < 1024 && commonByteArray_DW_PROJECT2_AircraftUtilization.length == 0) {
   					commonByteArray_DW_PROJECT2_AircraftUtilization = new byte[1024];
				} else {
   					commonByteArray_DW_PROJECT2_AircraftUtilization = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_DW_PROJECT2_AircraftUtilization, 0, length);
			strReturn = new String(commonByteArray_DW_PROJECT2_AircraftUtilization, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_DW_PROJECT2_AircraftUtilization.length) {
				if(length < 1024 && commonByteArray_DW_PROJECT2_AircraftUtilization.length == 0) {
   					commonByteArray_DW_PROJECT2_AircraftUtilization = new byte[1024];
				} else {
   					commonByteArray_DW_PROJECT2_AircraftUtilization = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_DW_PROJECT2_AircraftUtilization, 0, length);
			strReturn = new String(commonByteArray_DW_PROJECT2_AircraftUtilization, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_DW_PROJECT2_AircraftUtilization) {

        	try {

        		int length = 0;
		
					this.aircraftregistration = readString(dis);
					
					this.yearmonth = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.scheduledhours = null;
           				} else {
           			    	this.scheduledhours = dis.readDouble();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.unscheduledhours = null;
           				} else {
           			    	this.unscheduledhours = dis.readDouble();
           				}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_DW_PROJECT2_AircraftUtilization) {

        	try {

        		int length = 0;
		
					this.aircraftregistration = readString(dis);
					
					this.yearmonth = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.scheduledhours = null;
           				} else {
           			    	this.scheduledhours = dis.readDouble();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.unscheduledhours = null;
           				} else {
           			    	this.unscheduledhours = dis.readDouble();
           				}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.aircraftregistration,dos);
					
					// String
				
						writeString(this.yearmonth,dos);
					
					// Double
				
						if(this.scheduledhours == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.scheduledhours);
		            	}
					
					// Double
				
						if(this.unscheduledhours == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.unscheduledhours);
		            	}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.aircraftregistration,dos);
					
					// String
				
						writeString(this.yearmonth,dos);
					
					// Double
				
						if(this.scheduledhours == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.scheduledhours);
		            	}
					
					// Double
				
						if(this.unscheduledhours == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.unscheduledhours);
		            	}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("aircraftregistration="+aircraftregistration);
		sb.append(",yearmonth="+yearmonth);
		sb.append(",scheduledhours="+String.valueOf(scheduledhours));
		sb.append(",unscheduledhours="+String.valueOf(unscheduledhours));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row1Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class after_tDBInput_1Struct implements routines.system.IPersistableRow<after_tDBInput_1Struct> {
    final static byte[] commonByteArrayLock_DW_PROJECT2_AircraftUtilization = new byte[0];
    static byte[] commonByteArray_DW_PROJECT2_AircraftUtilization = new byte[0];

	
			    public String aircraftregistration;

				public String getAircraftregistration () {
					return this.aircraftregistration;
				}
				
			    public String yearmonth;

				public String getYearmonth () {
					return this.yearmonth;
				}
				
			    public Double scheduledhours;

				public Double getScheduledhours () {
					return this.scheduledhours;
				}
				
			    public Double unscheduledhours;

				public Double getUnscheduledhours () {
					return this.unscheduledhours;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_DW_PROJECT2_AircraftUtilization.length) {
				if(length < 1024 && commonByteArray_DW_PROJECT2_AircraftUtilization.length == 0) {
   					commonByteArray_DW_PROJECT2_AircraftUtilization = new byte[1024];
				} else {
   					commonByteArray_DW_PROJECT2_AircraftUtilization = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_DW_PROJECT2_AircraftUtilization, 0, length);
			strReturn = new String(commonByteArray_DW_PROJECT2_AircraftUtilization, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_DW_PROJECT2_AircraftUtilization.length) {
				if(length < 1024 && commonByteArray_DW_PROJECT2_AircraftUtilization.length == 0) {
   					commonByteArray_DW_PROJECT2_AircraftUtilization = new byte[1024];
				} else {
   					commonByteArray_DW_PROJECT2_AircraftUtilization = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_DW_PROJECT2_AircraftUtilization, 0, length);
			strReturn = new String(commonByteArray_DW_PROJECT2_AircraftUtilization, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_DW_PROJECT2_AircraftUtilization) {

        	try {

        		int length = 0;
		
					this.aircraftregistration = readString(dis);
					
					this.yearmonth = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.scheduledhours = null;
           				} else {
           			    	this.scheduledhours = dis.readDouble();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.unscheduledhours = null;
           				} else {
           			    	this.unscheduledhours = dis.readDouble();
           				}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_DW_PROJECT2_AircraftUtilization) {

        	try {

        		int length = 0;
		
					this.aircraftregistration = readString(dis);
					
					this.yearmonth = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.scheduledhours = null;
           				} else {
           			    	this.scheduledhours = dis.readDouble();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.unscheduledhours = null;
           				} else {
           			    	this.unscheduledhours = dis.readDouble();
           				}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.aircraftregistration,dos);
					
					// String
				
						writeString(this.yearmonth,dos);
					
					// Double
				
						if(this.scheduledhours == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.scheduledhours);
		            	}
					
					// Double
				
						if(this.unscheduledhours == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.unscheduledhours);
		            	}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.aircraftregistration,dos);
					
					// String
				
						writeString(this.yearmonth,dos);
					
					// Double
				
						if(this.scheduledhours == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.scheduledhours);
		            	}
					
					// Double
				
						if(this.unscheduledhours == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.unscheduledhours);
		            	}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("aircraftregistration="+aircraftregistration);
		sb.append(",yearmonth="+yearmonth);
		sb.append(",scheduledhours="+String.valueOf(scheduledhours));
		sb.append(",unscheduledhours="+String.valueOf(unscheduledhours));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(after_tDBInput_1Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tDBInput_5Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBInput_5_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
		String currentVirtualComponent = null;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;


		tDBInput_2Process(globalMap);

		row9Struct row9 = new row9Struct();
tmapStruct tmap = new tmapStruct();

		row1Struct row1 = new row1Struct();
row3Struct row3 = new row3Struct();
filterStruct filter = new filterStruct();
row8Struct row8 = new row8Struct();
aStruct a = new aStruct();

			row10Struct row10 = new row10Struct();
row11Struct row11 = new row11Struct();
dboutStruct dbout = new dboutStruct();
prova1Struct prova1 = new prova1Struct();




	
	/**
	 * [tAggregateRow_1_AGGOUT begin ] start
	 */

	

	
		
		ok_Hash.put("tAggregateRow_1_AGGOUT", false);
		start_Hash.put("tAggregateRow_1_AGGOUT", System.currentTimeMillis());
		
	
		currentVirtualComponent = "tAggregateRow_1";
	
	currentComponent="tAggregateRow_1_AGGOUT";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row10");
					}
				
		int tos_count_tAggregateRow_1_AGGOUT = 0;
		

// ------------ Seems it is not used

java.util.Map hashAggreg_tAggregateRow_1 = new java.util.HashMap(); 

// ------------

	class UtilClass_tAggregateRow_1 { // G_OutBegin_AggR_144

		public double sd(Double[] data) {
	        final int n = data.length;
        	if (n < 2) {
	            return Double.NaN;
        	}
        	double d1 = 0d;
        	double d2 =0d;
	        
	        for (int i = 0; i < data.length; i++) {
            	d1 += (data[i]*data[i]);
            	d2 += data[i];
        	}
        
	        return Math.sqrt((n*d1 - d2*d2)/n/(n-1));
	    }
	    
		public void checkedIADD(byte a, byte b, boolean checkTypeOverFlow, boolean checkUlp) {
		    byte r = (byte) (a + b);
		    if (checkTypeOverFlow && ((a ^ r) & (b ^ r)) < 0) {
		        throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b), "'short/Short'", "'byte/Byte'"));
		    }
		}
		
		public void checkedIADD(short a, short b, boolean checkTypeOverFlow, boolean checkUlp) {
		    short r = (short) (a + b);
		    if (checkTypeOverFlow && ((a ^ r) & (b ^ r)) < 0) {
		        throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b), "'int/Integer'", "'short/Short'"));
		    }
		}
		
		public void checkedIADD(int a, int b, boolean checkTypeOverFlow, boolean checkUlp) {
		    int r = a + b;
		    if (checkTypeOverFlow && ((a ^ r) & (b ^ r)) < 0) {
		        throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b), "'long/Long'", "'int/Integer'"));
		    }
		}
		
		public void checkedIADD(long a, long b, boolean checkTypeOverFlow, boolean checkUlp) {
		    long r = a + b;
		    if (checkTypeOverFlow && ((a ^ r) & (b ^ r)) < 0) {
		        throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b), "'BigDecimal'", "'long/Long'"));
		    }
		}
		
		public void checkedIADD(float a, float b, boolean checkTypeOverFlow, boolean checkUlp) {
		
			if(checkUlp) {
			    float minAddedValue = Math.ulp(a);
			    if (minAddedValue > Math.abs(b)) {
			        throw new RuntimeException(buildPrecisionMessage(String.valueOf(a), String.valueOf(b), "'double' or 'BigDecimal'", "'float/Float'"));
			    }
			}
			
		    if (checkTypeOverFlow && ((double) a + (double) b > (double) Float.MAX_VALUE) || ((double) a + (double) b < (double) -Float.MAX_VALUE)) {
		        throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b), "'double' or 'BigDecimal'", "'float/Float'"));
		    }
		}
		
		public void checkedIADD(double a, double b, boolean checkTypeOverFlow, boolean checkUlp) {
		
			if(checkUlp) {
			    double minAddedValue = Math.ulp(a);
			    if (minAddedValue > Math.abs(b)) {
			        throw new RuntimeException(buildPrecisionMessage(String.valueOf(a), String.valueOf(a), "'BigDecimal'", "'double/Double'"));
			    }
			}
		
		    if (checkTypeOverFlow && (a + b > (double) Double.MAX_VALUE) || (a + b < -Double.MAX_VALUE )) {
		        throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b), "'BigDecimal'", "'double/Double'"));
		    }
		}
		
		public void checkedIADD(double a, byte b, boolean checkTypeOverFlow, boolean checkUlp) {
		
		    if (checkTypeOverFlow && (a + b > (double) Double.MAX_VALUE) || (a + b < -Double.MAX_VALUE )) {
		        throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b), "'BigDecimal'", "'double/Double'"));
		    }
		}
		
		public void checkedIADD(double a, short b, boolean checkTypeOverFlow, boolean checkUlp) {
		
		    if (checkTypeOverFlow && (a + b > (double) Double.MAX_VALUE) || (a + b < -Double.MAX_VALUE )) {
		        throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b), "'BigDecimal'", "'double/Double'"));
		    }
		}
		
		public void checkedIADD(double a, int b, boolean checkTypeOverFlow, boolean checkUlp) {
		
		    if (checkTypeOverFlow && (a + b > (double) Double.MAX_VALUE) || (a + b < -Double.MAX_VALUE )) {
		        throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b), "'BigDecimal'", "'double/Double'"));
		    }
		}
		
		public void checkedIADD(double a, float b, boolean checkTypeOverFlow, boolean checkUlp) {
		
			if(checkUlp) {
			    double minAddedValue = Math.ulp(a);
			    if (minAddedValue > Math.abs(b)) {
			        throw new RuntimeException(buildPrecisionMessage(String.valueOf(a), String.valueOf(a), "'BigDecimal'", "'double/Double'"));
			    }
			}
		
		    if (checkTypeOverFlow && (a + b > (double) Double.MAX_VALUE) || (a + b < -Double.MAX_VALUE )) {
		        throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b), "'BigDecimal'", "'double/Double'"));
		    }
		}
		
		private String buildOverflowMessage(String a, String b, String advicedTypes, String originalType) {
		    return "Type overflow when adding " + b + " to " + a
		    + ", to resolve this problem, increase the precision by using "+ advicedTypes +" type in place of "+ originalType +".";
		}
		
		private String buildPrecisionMessage(String a, String b, String advicedTypes, String originalType) {
		    return "The double precision is unsufficient to add the value " + b + " to " + a
		    + ", to resolve this problem, increase the precision by using "+ advicedTypes +" type in place of "+ originalType +".";
		}

	} // G_OutBegin_AggR_144

	UtilClass_tAggregateRow_1 utilClass_tAggregateRow_1 = new UtilClass_tAggregateRow_1();

	

	class AggOperationStruct_tAggregateRow_1 { // G_OutBegin_AggR_100

		private static final int DEFAULT_HASHCODE = 1;
	    private static final int PRIME = 31;
	    private int hashCode = DEFAULT_HASHCODE;
	    public boolean hashCodeDirty = true;

    				java.util.Date timeid;
    				String aircraftid;
         			Long flighthours_sum;
         			Integer uncheduled_sum;
         			Integer scheduled_sum;
         			Long flightcycles_sum;
         			Long delays_sum;
         			Long cancelations_sum;
         			Long delayedminutes_sum;
        
	    @Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;
		
							result = prime * result + ((this.timeid == null) ? 0 : this.timeid.hashCode());
							
							result = prime * result + ((this.aircraftid == null) ? 0 : this.aircraftid.hashCode());
							
	    		this.hashCode = result;
	    		this.hashCodeDirty = false;		
			}
			return this.hashCode;
		}
		
		@Override
		public boolean equals(Object obj) {
			if (this == obj) return true;
			if (obj == null) return false;
			if (getClass() != obj.getClass()) return false;
			final AggOperationStruct_tAggregateRow_1 other = (AggOperationStruct_tAggregateRow_1) obj;
			
							if (this.timeid == null) {
								if (other.timeid != null) 
									return false;
							} else if (!this.timeid.equals(other.timeid)) 
								return false;
						
							if (this.aircraftid == null) {
								if (other.aircraftid != null) 
									return false;
							} else if (!this.aircraftid.equals(other.aircraftid)) 
								return false;
						
			
			return true;
		}
  
        
	} // G_OutBegin_AggR_100

	AggOperationStruct_tAggregateRow_1 operation_result_tAggregateRow_1 = null;
	AggOperationStruct_tAggregateRow_1 operation_finder_tAggregateRow_1 = new AggOperationStruct_tAggregateRow_1();
	java.util.Map<AggOperationStruct_tAggregateRow_1,AggOperationStruct_tAggregateRow_1> hash_tAggregateRow_1 = new java.util.HashMap<AggOperationStruct_tAggregateRow_1,AggOperationStruct_tAggregateRow_1>();
	

 



/**
 * [tAggregateRow_1_AGGOUT begin ] stop
 */



	
	/**
	 * [tUnite_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tUnite_1", false);
		start_Hash.put("tUnite_1", System.currentTimeMillis());
		
	
	currentComponent="tUnite_1";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"tmap","a");
					}
				
		int tos_count_tUnite_1 = 0;
		

int nb_line_tUnite_1 = 0;

 



/**
 * [tUnite_1 begin ] stop
 */

	
	/**
	 * [tMap_3 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_3", false);
		start_Hash.put("tMap_3", System.currentTimeMillis());
		
	
	currentComponent="tMap_3";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row9");
					}
				
		int tos_count_tMap_3 = 0;
		




// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_3__Struct  {
}
Var__tMap_3__Struct Var__tMap_3 = new Var__tMap_3__Struct();
// ###############################

// ###############################
// # Outputs initialization
tmapStruct tmap_tmp = new tmapStruct();
// ###############################

        
        



        









 



/**
 * [tMap_3 begin ] stop
 */



	
	/**
	 * [tDBInput_5 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBInput_5", false);
		start_Hash.put("tDBInput_5", System.currentTimeMillis());
		
	
	currentComponent="tDBInput_5";

	
		int tos_count_tDBInput_5 = 0;
		
	
    
	
		    int nb_line_tDBInput_5 = 0;
		    java.sql.Connection conn_tDBInput_5 = null;
				String driverClass_tDBInput_5 = "org.postgresql.Driver";
			    java.lang.Class jdbcclazz_tDBInput_5 = java.lang.Class.forName(driverClass_tDBInput_5);
				String dbUser_tDBInput_5 = "joan.acero";
				
				 
	final String decryptedPassword_tDBInput_5 = routines.system.PasswordEncryptUtil.decryptPassword("enc:routine.encryption.key.v1:mDN7PKPn6PNjlY3G+Rk0RdtKod61KhK7uwIzhqaWgapI8ltQ");
				
				String dbPwd_tDBInput_5 = decryptedPassword_tDBInput_5;
				
				String url_tDBInput_5 = "jdbc:postgresql://" + "postgresfib.fib.upc.edu" + ":" + "6433" + "/" + "AIMS";
				
				conn_tDBInput_5 = java.sql.DriverManager.getConnection(url_tDBInput_5,dbUser_tDBInput_5,dbPwd_tDBInput_5);
		        
				conn_tDBInput_5.setAutoCommit(false);
			
		    
			java.sql.Statement stmt_tDBInput_5 = conn_tDBInput_5.createStatement();

		    String dbquery_tDBInput_5 = "SELECT \n    TO_DATE(SUBSTRING(flightID, 1, 6), 'DDMMYY') AS timeID,\n    aircraftRegistration AS aircraftID,\n    SUM("
+"CAST(EXTRACT(EPOCH FROM (actualArrival - actualDeparture)) / 3600 AS INT)) AS FlightHours, \n    SUM(CASE WHEN cancelled"
+" = false THEN 1 END) AS FlightCycles, \n    SUM(CASE WHEN delayCode IS NOT NULL THEN 1 ELSE 0 END) AS Delays,\n    SUM(C"
+"ASE WHEN cancelled = true THEN 1 ELSE 0 END) AS Cancelations, \n    SUM(CAST(EXTRACT(EPOCH FROM (actualDeparture - sched"
+"uledDeparture)) / 60 AS INT)) AS DelayedMinutes \nFROM \n    Flights\nWHERE    \n    NOT EXISTS (\n        SELECT 1\n   "
+"     FROM Flights F2\n        WHERE \n            aircraftRegistration = F2.aircraftRegistration\n            AND flight"
+"ID <> F2.flightID\n            AND scheduledDeparture < F2.scheduledArrival\n            AND scheduledArrival > F2.sched"
+"uledDeparture\n    ) \n    AND EXTRACT(EPOCH FROM (actualArrival - actualDeparture)) / 3600 <= 24\n    AND scheduledArri"
+"val > scheduledDeparture\n    AND actualArrival > actualDeparture\n    AND actualDeparture::DATE = scheduledDeparture::D"
+"ATE\n    AND SUBSTRING(flightID, 1, 6) = TO_CHAR(scheduledDeparture, 'DDMMYY')\n    AND SUBSTRING(flightID, 7, 1) = '-' "
+"\n    AND SUBSTRING(flightID, 8, 3) = departureAirport\n    AND SUBSTRING(flightID, 11, 1) = '-' \n    AND SUBSTRING(fli"
+"ghtID, 12, 3) = arrivalAirport\n    AND SUBSTRING(flightID, 15, 1) = '-' \n    AND SUBSTRING(flightID, 16, 4) ~ '^[0-9]{"
+"4}$' \n    AND SUBSTRING(flightID, 20, 1) = '-' \n    AND SUBSTRING(flightID, 21, 6) = aircraftRegistration\nGROUP BY \n"
+"       TO_DATE(SUBSTRING(flightID, 1, 6), 'DDMMYY'),\n    aircraftRegistration;";
		    

            	globalMap.put("tDBInput_5_QUERY",dbquery_tDBInput_5);
		    java.sql.ResultSet rs_tDBInput_5 = null;

		    try {
		    	rs_tDBInput_5 = stmt_tDBInput_5.executeQuery(dbquery_tDBInput_5);
		    	java.sql.ResultSetMetaData rsmd_tDBInput_5 = rs_tDBInput_5.getMetaData();
		    	int colQtyInRs_tDBInput_5 = rsmd_tDBInput_5.getColumnCount();

		    String tmpContent_tDBInput_5 = null;
		    
		    
		    while (rs_tDBInput_5.next()) {
		        nb_line_tDBInput_5++;
		        
							if(colQtyInRs_tDBInput_5 < 1) {
								row9.timeid = null;
							} else {
										
			row9.timeid = routines.system.JDBCUtil.getDate(rs_tDBInput_5, 1);
		                    }
							if(colQtyInRs_tDBInput_5 < 2) {
								row9.aircraftid = null;
							} else {
	                         		
        	row9.aircraftid = routines.system.JDBCUtil.getString(rs_tDBInput_5, 2, false);
		                    }
							if(colQtyInRs_tDBInput_5 < 3) {
								row9.flighthours = null;
							} else {
		                          
            row9.flighthours = rs_tDBInput_5.getLong(3);
            if(rs_tDBInput_5.wasNull()){
                    row9.flighthours = null;
            }
		                    }
							if(colQtyInRs_tDBInput_5 < 4) {
								row9.flightcycles = null;
							} else {
		                          
            row9.flightcycles = rs_tDBInput_5.getLong(4);
            if(rs_tDBInput_5.wasNull()){
                    row9.flightcycles = null;
            }
		                    }
							if(colQtyInRs_tDBInput_5 < 5) {
								row9.delays = null;
							} else {
		                          
            row9.delays = rs_tDBInput_5.getLong(5);
            if(rs_tDBInput_5.wasNull()){
                    row9.delays = null;
            }
		                    }
							if(colQtyInRs_tDBInput_5 < 6) {
								row9.cancelations = null;
							} else {
		                          
            row9.cancelations = rs_tDBInput_5.getLong(6);
            if(rs_tDBInput_5.wasNull()){
                    row9.cancelations = null;
            }
		                    }
							if(colQtyInRs_tDBInput_5 < 7) {
								row9.delayedminutes = null;
							} else {
		                          
            row9.delayedminutes = rs_tDBInput_5.getLong(7);
            if(rs_tDBInput_5.wasNull()){
                    row9.delayedminutes = null;
            }
		                    }
					


 



/**
 * [tDBInput_5 begin ] stop
 */
	
	/**
	 * [tDBInput_5 main ] start
	 */

	

	
	
	currentComponent="tDBInput_5";

	

 


	tos_count_tDBInput_5++;

/**
 * [tDBInput_5 main ] stop
 */
	
	/**
	 * [tDBInput_5 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBInput_5";

	

 



/**
 * [tDBInput_5 process_data_begin ] stop
 */

	
	/**
	 * [tMap_3 main ] start
	 */

	

	
	
	currentComponent="tMap_3";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row9"
						
						);
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_3 = false;
		

        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_3 = false;
		  boolean mainRowRejected_tMap_3 = false;
            				    								  
		// ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_3__Struct Var = Var__tMap_3;// ###############################
        // ###############################
        // # Output tables

tmap = null;


// # Output table : 'tmap'
tmap_tmp.timeid = row9.timeid ;
tmap_tmp.aircraftid = row9.aircraftid ;
tmap_tmp.flighthours = row9.flighthours ;
tmap_tmp.flightcycles = row9.flightcycles ;
tmap_tmp.delays = row9.delays ;
tmap_tmp.cancelations = row9.cancelations ;
tmap_tmp.delayedminutes = row9.delayedminutes ;
tmap_tmp.uncheduled = 0;
tmap_tmp.scheduled = 0;
tmap = tmap_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_3 = false;










 


	tos_count_tMap_3++;

/**
 * [tMap_3 main ] stop
 */
	
	/**
	 * [tMap_3 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_3";

	

 



/**
 * [tMap_3 process_data_begin ] stop
 */
// Start of branch "tmap"
if(tmap != null) { 



	
	/**
	 * [tUnite_1 main ] start
	 */

	

	
	
	currentComponent="tUnite_1";

	
						if(execStat){
							runStat.updateStatOnConnection(iterateId,1,1
								
									,"tmap"
									
							);
						}
						
//////////
 

// for output
			row10 = new row10Struct();
								
			row10.timeid = tmap.timeid;								
			row10.aircraftid = tmap.aircraftid;								
			row10.flighthours = tmap.flighthours;								
			row10.flightcycles = tmap.flightcycles;								
			row10.delays = tmap.delays;								
			row10.cancelations = tmap.cancelations;								
			row10.delayedminutes = tmap.delayedminutes;								
			row10.uncheduled = tmap.uncheduled;								
			row10.scheduled = tmap.scheduled;			

			nb_line_tUnite_1++;

//////////
 


	tos_count_tUnite_1++;

/**
 * [tUnite_1 main ] stop
 */
	
	/**
	 * [tUnite_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tUnite_1";

	

 



/**
 * [tUnite_1 process_data_begin ] stop
 */

	
	/**
	 * [tAggregateRow_1_AGGOUT main ] start
	 */

	

	
	
		currentVirtualComponent = "tAggregateRow_1";
	
	currentComponent="tAggregateRow_1_AGGOUT";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row10"
						
						);
					}
					
	
operation_finder_tAggregateRow_1.timeid = row10.timeid;
			operation_finder_tAggregateRow_1.aircraftid = row10.aircraftid;
			

	operation_finder_tAggregateRow_1.hashCodeDirty = true;
	
	operation_result_tAggregateRow_1 = hash_tAggregateRow_1.get(operation_finder_tAggregateRow_1);

	

	if(operation_result_tAggregateRow_1 == null) { // G_OutMain_AggR_001

		operation_result_tAggregateRow_1 = new AggOperationStruct_tAggregateRow_1();

		operation_result_tAggregateRow_1.timeid = operation_finder_tAggregateRow_1.timeid;
				operation_result_tAggregateRow_1.aircraftid = operation_finder_tAggregateRow_1.aircraftid;
				
		
		

		hash_tAggregateRow_1.put(operation_result_tAggregateRow_1, operation_result_tAggregateRow_1);
	
	} // G_OutMain_AggR_001


	
					if(operation_result_tAggregateRow_1.flighthours_sum == null) {
						operation_result_tAggregateRow_1.flighthours_sum = (long) 0;
					}
					
					if( row10.flighthours != null)
						operation_result_tAggregateRow_1.flighthours_sum += row10.flighthours;
					if(operation_result_tAggregateRow_1.uncheduled_sum == null) {
						operation_result_tAggregateRow_1.uncheduled_sum = (int) 0;
					}
					
					if( row10.uncheduled != null)
						operation_result_tAggregateRow_1.uncheduled_sum += row10.uncheduled;
					if(operation_result_tAggregateRow_1.scheduled_sum == null) {
						operation_result_tAggregateRow_1.scheduled_sum = (int) 0;
					}
					
					if( row10.scheduled != null)
						operation_result_tAggregateRow_1.scheduled_sum += row10.scheduled;
					if(operation_result_tAggregateRow_1.flightcycles_sum == null) {
						operation_result_tAggregateRow_1.flightcycles_sum = (long) 0;
					}
					
					if( row10.flightcycles != null)
						operation_result_tAggregateRow_1.flightcycles_sum += row10.flightcycles;
					if(operation_result_tAggregateRow_1.delays_sum == null) {
						operation_result_tAggregateRow_1.delays_sum = (long) 0;
					}
					
					if( row10.delays != null)
						operation_result_tAggregateRow_1.delays_sum += row10.delays;
					if(operation_result_tAggregateRow_1.cancelations_sum == null) {
						operation_result_tAggregateRow_1.cancelations_sum = (long) 0;
					}
					
					if( row10.cancelations != null)
						operation_result_tAggregateRow_1.cancelations_sum += row10.cancelations;
					if(operation_result_tAggregateRow_1.delayedminutes_sum == null) {
						operation_result_tAggregateRow_1.delayedminutes_sum = (long) 0;
					}
					
					if( row10.delayedminutes != null)
						operation_result_tAggregateRow_1.delayedminutes_sum += row10.delayedminutes;


 


	tos_count_tAggregateRow_1_AGGOUT++;

/**
 * [tAggregateRow_1_AGGOUT main ] stop
 */
	
	/**
	 * [tAggregateRow_1_AGGOUT process_data_begin ] start
	 */

	

	
	
		currentVirtualComponent = "tAggregateRow_1";
	
	currentComponent="tAggregateRow_1_AGGOUT";

	

 



/**
 * [tAggregateRow_1_AGGOUT process_data_begin ] stop
 */
	
	/**
	 * [tAggregateRow_1_AGGOUT process_data_end ] start
	 */

	

	
	
		currentVirtualComponent = "tAggregateRow_1";
	
	currentComponent="tAggregateRow_1_AGGOUT";

	

 



/**
 * [tAggregateRow_1_AGGOUT process_data_end ] stop
 */



	
	/**
	 * [tUnite_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tUnite_1";

	

 



/**
 * [tUnite_1 process_data_end ] stop
 */

} // End of branch "tmap"




	
	/**
	 * [tMap_3 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_3";

	

 



/**
 * [tMap_3 process_data_end ] stop
 */



	
	/**
	 * [tDBInput_5 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBInput_5";

	

 



/**
 * [tDBInput_5 process_data_end ] stop
 */
	
	/**
	 * [tDBInput_5 end ] start
	 */

	

	
	
	currentComponent="tDBInput_5";

	

	}
}finally{
	if (rs_tDBInput_5 != null) {
		rs_tDBInput_5.close();
	}
	if (stmt_tDBInput_5 != null) {
		stmt_tDBInput_5.close();
	}
	if(conn_tDBInput_5 != null && !conn_tDBInput_5.isClosed()) {
		
			conn_tDBInput_5.commit();
			
		
			conn_tDBInput_5.close();
			
			if("com.mysql.cj.jdbc.Driver".equals((String)globalMap.get("driverClass_"))
			    && routines.system.BundleUtils.inOSGi()) {
			        Class.forName("com.mysql.cj.jdbc.AbandonedConnectionCleanupThread").
			            getMethod("checkedShutdown").invoke(null, (Object[]) null);
			}
			
	}
	
}
globalMap.put("tDBInput_5_NB_LINE",nb_line_tDBInput_5);
 

ok_Hash.put("tDBInput_5", true);
end_Hash.put("tDBInput_5", System.currentTimeMillis());




/**
 * [tDBInput_5 end ] stop
 */

	
	/**
	 * [tMap_3 end ] start
	 */

	

	
	
	currentComponent="tMap_3";

	


// ###############################
// # Lookup hashes releasing
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row9");
			  	}
			  	
 

ok_Hash.put("tMap_3", true);
end_Hash.put("tMap_3", System.currentTimeMillis());




/**
 * [tMap_3 end ] stop
 */







	
	/**
	 * [tMap_4 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_4", false);
		start_Hash.put("tMap_4", System.currentTimeMillis());
		
	
	currentComponent="tMap_4";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row8");
					}
				
		int tos_count_tMap_4 = 0;
		




// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_4__Struct  {
	long var1;
}
Var__tMap_4__Struct Var__tMap_4 = new Var__tMap_4__Struct();
// ###############################

// ###############################
// # Outputs initialization
aStruct a_tmp = new aStruct();
// ###############################

        
        



        









 



/**
 * [tMap_4 begin ] stop
 */



	
	/**
	 * [tFilterRow_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tFilterRow_1", false);
		start_Hash.put("tFilterRow_1", System.currentTimeMillis());
		
	
	currentComponent="tFilterRow_1";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"filter");
					}
				
		int tos_count_tFilterRow_1 = 0;
		
    int nb_line_tFilterRow_1 = 0;
    int nb_line_ok_tFilterRow_1 = 0;
    int nb_line_reject_tFilterRow_1 = 0;

    class Operator_tFilterRow_1 {
      private String sErrorMsg = "";
      private boolean bMatchFlag = true;
      private String sUnionFlag = "&&";

      public Operator_tFilterRow_1(String unionFlag){
        sUnionFlag = unionFlag;
        bMatchFlag =  "||".equals(unionFlag) ? false : true;
      }

      public String getErrorMsg() {
        if (sErrorMsg != null && sErrorMsg.length() > 1)
          return sErrorMsg.substring(1);
        else 
          return null;
      }

      public boolean getMatchFlag() {
        return bMatchFlag;
      }

      public void matches(boolean partMatched, String reason) {
        // no need to care about the next judgement
        if ("||".equals(sUnionFlag) && bMatchFlag){
          return;
        }

        if (!partMatched) {
          sErrorMsg += "|" + reason;
        }

        if ("||".equals(sUnionFlag))
          bMatchFlag = bMatchFlag || partMatched;
        else
          bMatchFlag = bMatchFlag && partMatched;
      }
    }

 



/**
 * [tFilterRow_1 begin ] stop
 */



	
	/**
	 * [tMap_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_1", false);
		start_Hash.put("tMap_1", System.currentTimeMillis());
		
	
	currentComponent="tMap_1";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row3");
					}
				
		int tos_count_tMap_1 = 0;
		




// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_1__Struct  {
	int unscheduledhours;
	int var1;
	java.util.Date yearmonth;
}
Var__tMap_1__Struct Var__tMap_1 = new Var__tMap_1__Struct();
// ###############################

// ###############################
// # Outputs initialization
filterStruct filter_tmp = new filterStruct();
// ###############################

        
        



        









 



/**
 * [tMap_1 begin ] stop
 */



	
	/**
	 * [tJoin_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tJoin_1", false);
		start_Hash.put("tJoin_1", System.currentTimeMillis());
		
	
	currentComponent="tJoin_1";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row1");
					}
				
		int tos_count_tJoin_1 = 0;
		
    final java.util.Map<row7Struct, row7Struct> tHash_tJoin_1 = (java.util.Map<row7Struct, row7Struct>) globalMap.get("tHash_row7");
    
    class Util_tJoin_1
    {
        row7Struct lookupValue = null;
        row7Struct row7HashKey = new row7Struct(); 
        
        public boolean isJoined(row1Struct mainRow) {                        
           row7HashKey.aircraftregistration = mainRow.aircraftregistration;
            
           row7HashKey.yearmonth = mainRow.yearmonth;

			row7HashKey.hashCodeDirty = true;			             
            lookupValue = tHash_tJoin_1.get(row7HashKey);            
            if(lookupValue != null){
            	return true;
            }else{
            }  
            return false;
        }
    }
        
	Util_tJoin_1 util_tJoin_1 = new Util_tJoin_1();
        
    int nb_line_tJoin_1 = 0; 
 



/**
 * [tJoin_1 begin ] stop
 */



	
	/**
	 * [tDBInput_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBInput_1", false);
		start_Hash.put("tDBInput_1", System.currentTimeMillis());
		
	
	currentComponent="tDBInput_1";

	
		int tos_count_tDBInput_1 = 0;
		
	
    
	
		    int nb_line_tDBInput_1 = 0;
		    java.sql.Connection conn_tDBInput_1 = null;
				String driverClass_tDBInput_1 = "org.postgresql.Driver";
			    java.lang.Class jdbcclazz_tDBInput_1 = java.lang.Class.forName(driverClass_tDBInput_1);
				String dbUser_tDBInput_1 = "joan.acero";
				
				 
	final String decryptedPassword_tDBInput_1 = routines.system.PasswordEncryptUtil.decryptPassword("enc:routine.encryption.key.v1:FMu5JWlt+XHmzGxTVWH+hQjMgrzaRnFnI5lVm3BmZ1jDnbGi");
				
				String dbPwd_tDBInput_1 = decryptedPassword_tDBInput_1;
				
				String url_tDBInput_1 = "jdbc:postgresql://" + "postgresfib.fib.upc.edu" + ":" + "6433" + "/" + "AMOS";
				
				conn_tDBInput_1 = java.sql.DriverManager.getConnection(url_tDBInput_1,dbUser_tDBInput_1,dbPwd_tDBInput_1);
		        
				conn_tDBInput_1.setAutoCommit(false);
			
		    
			java.sql.Statement stmt_tDBInput_1 = conn_tDBInput_1.createStatement();

		    String dbquery_tDBInput_1 = "SELECT \n    me.aircraftRegistration,\n    me.startTime AS yearMonth,  \n    SUM(\n        CASE\n            WHEN me.ki"
+"nd IN ('Maintenance', 'Revision') THEN EXTRACT(EPOCH FROM me.duration) / 3600\n            ELSE 0\n        END\n    ) AS"
+" scheduledHours,\nSUM(\n        CASE\n            WHEN me.kind IN ('AircraftOnGround') THEN EXTRACT(EPOCH FROM me.durati"
+"on) / 3600\n            ELSE 0\n        END\n    ) AS unscheduledHours\nFROM MaintenanceEvents me\nWHERE\n    me.kind IN"
+" ('Maintenance', 'Revision', 'AircraftOnGround')\nGROUP BY \n    me.aircraftRegistration,\n    me.startTime";
		    

            	globalMap.put("tDBInput_1_QUERY",dbquery_tDBInput_1);
		    java.sql.ResultSet rs_tDBInput_1 = null;

		    try {
		    	rs_tDBInput_1 = stmt_tDBInput_1.executeQuery(dbquery_tDBInput_1);
		    	java.sql.ResultSetMetaData rsmd_tDBInput_1 = rs_tDBInput_1.getMetaData();
		    	int colQtyInRs_tDBInput_1 = rsmd_tDBInput_1.getColumnCount();

		    String tmpContent_tDBInput_1 = null;
		    
		    
		    while (rs_tDBInput_1.next()) {
		        nb_line_tDBInput_1++;
		        
							if(colQtyInRs_tDBInput_1 < 1) {
								row1.aircraftregistration = null;
							} else {
	                         		
        	row1.aircraftregistration = routines.system.JDBCUtil.getString(rs_tDBInput_1, 1, false);
		                    }
							if(colQtyInRs_tDBInput_1 < 2) {
								row1.yearmonth = null;
							} else {
	                         		
        	row1.yearmonth = routines.system.JDBCUtil.getString(rs_tDBInput_1, 2, false);
		                    }
							if(colQtyInRs_tDBInput_1 < 3) {
								row1.scheduledhours = null;
							} else {
	                         		
            row1.scheduledhours = rs_tDBInput_1.getDouble(3);
            if(rs_tDBInput_1.wasNull()){
                    row1.scheduledhours = null;
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 4) {
								row1.unscheduledhours = null;
							} else {
	                         		
            row1.unscheduledhours = rs_tDBInput_1.getDouble(4);
            if(rs_tDBInput_1.wasNull()){
                    row1.unscheduledhours = null;
            }
		                    }
					


 



/**
 * [tDBInput_1 begin ] stop
 */
	
	/**
	 * [tDBInput_1 main ] start
	 */

	

	
	
	currentComponent="tDBInput_1";

	

 


	tos_count_tDBInput_1++;

/**
 * [tDBInput_1 main ] stop
 */
	
	/**
	 * [tDBInput_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBInput_1";

	

 



/**
 * [tDBInput_1 process_data_begin ] stop
 */

	
	/**
	 * [tJoin_1 main ] start
	 */

	

	
	
	currentComponent="tJoin_1";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row1"
						
						);
					}
					

			row3 = null;	
	
				row3 = new row3Struct();						
						row3.aircraftregistration = row1.aircraftregistration;					
						row3.yearmonth = row1.yearmonth;					
						row3.scheduledhours = row1.scheduledhours;					
						row3.unscheduledhours = row1.unscheduledhours;

			if(util_tJoin_1.isJoined(row1)){ 			
								row3.unscheduledhours2 = util_tJoin_1.lookupValue.unscheduledhours2;
			} 
			
///////////////////////    			

 


	tos_count_tJoin_1++;

/**
 * [tJoin_1 main ] stop
 */
	
	/**
	 * [tJoin_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJoin_1";

	

 



/**
 * [tJoin_1 process_data_begin ] stop
 */
// Start of branch "row3"
if(row3 != null) { 



	
	/**
	 * [tMap_1 main ] start
	 */

	

	
	
	currentComponent="tMap_1";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row3"
						
						);
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_1 = false;
		

        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_1 = false;
		  boolean mainRowRejected_tMap_1 = false;
            				    								  
		// ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_1__Struct Var = Var__tMap_1;
Var.unscheduledhours = (int) Math.round(
(row3.unscheduledhours == null ? 0 : row3.unscheduledhours) + (row3.unscheduledhours2 == null ? 0 : row3.unscheduledhours2)) ;
Var.var1 = (int) Math.round(row3.scheduledhours ) ;
Var.yearmonth = TalendDate.parseDate("yyyy-MM-dd", StringHandling.LEFT(row3.yearmonth, 10)) ;// ###############################
        // ###############################
        // # Output tables

filter = null;


// # Output table : 'filter'
filter_tmp.yearmonth = Var.yearmonth ;
filter_tmp.aircraftregistration = row3.aircraftregistration   ;
filter_tmp.scheduledhours = Var.var1 ;
filter_tmp.unscheduledhours = Var.unscheduledhours   ;
filter = filter_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_1 = false;










 


	tos_count_tMap_1++;

/**
 * [tMap_1 main ] stop
 */
	
	/**
	 * [tMap_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_1";

	

 



/**
 * [tMap_1 process_data_begin ] stop
 */
// Start of branch "filter"
if(filter != null) { 



	
	/**
	 * [tFilterRow_1 main ] start
	 */

	

	
	
	currentComponent="tFilterRow_1";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"filter"
						
						);
					}
					

          row8 = null;
    Operator_tFilterRow_1 ope_tFilterRow_1 = new Operator_tFilterRow_1("&&");  
          ope_tFilterRow_1.matches((filter.scheduledhours >= 0)
                         , "scheduledhours>=0 failed");  
          ope_tFilterRow_1.matches((filter.unscheduledhours >= 0)
                         , "unscheduledhours>=0 failed");
    
    if (ope_tFilterRow_1.getMatchFlag()) {
              if(row8 == null){ 
                row8 = new row8Struct();
              }
               row8.yearmonth = filter.yearmonth;
               row8.aircraftregistration = filter.aircraftregistration;
               row8.scheduledhours = filter.scheduledhours;
               row8.unscheduledhours = filter.unscheduledhours;    
      nb_line_ok_tFilterRow_1++;
    } else {
      nb_line_reject_tFilterRow_1++;
    }

nb_line_tFilterRow_1++;

 


	tos_count_tFilterRow_1++;

/**
 * [tFilterRow_1 main ] stop
 */
	
	/**
	 * [tFilterRow_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFilterRow_1";

	

 



/**
 * [tFilterRow_1 process_data_begin ] stop
 */
// Start of branch "row8"
if(row8 != null) { 



	
	/**
	 * [tMap_4 main ] start
	 */

	

	
	
	currentComponent="tMap_4";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row8"
						
						);
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_4 = false;
		

        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_4 = false;
		  boolean mainRowRejected_tMap_4 = false;
            				    								  
		// ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_4__Struct Var = Var__tMap_4;
Var.var1 = 0;// ###############################
        // ###############################
        // # Output tables

a = null;


// # Output table : 'a'
a_tmp.timeid = row8.yearmonth ;
a_tmp.aircraftid = row8.aircraftregistration ;
a_tmp.flighthours = Var.var1 ;
a_tmp.flightcycles = Var.var1 ;
a_tmp.delays = Var.var1 ;
a_tmp.cancelations = Var.var1 ;
a_tmp.delayedminutes = Var.var1 ;
a_tmp.scheduled = row8.scheduledhours ;
a_tmp.uncheduled = row8.unscheduledhours ;
a = a_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_4 = false;










 


	tos_count_tMap_4++;

/**
 * [tMap_4 main ] stop
 */
	
	/**
	 * [tMap_4 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_4";

	

 



/**
 * [tMap_4 process_data_begin ] stop
 */
// Start of branch "a"
if(a != null) { 



	
	/**
	 * [tUnite_1 main ] start
	 */

	

	
	
	currentComponent="tUnite_1";

	
						if(execStat){
							runStat.updateStatOnConnection(iterateId,1,1
								
									,"a"
									
							);
						}
						
//////////
 

// for output
			row10 = new row10Struct();
								
			row10.timeid = a.timeid;								
			row10.aircraftid = a.aircraftid;								
			row10.flighthours = a.flighthours;								
			row10.flightcycles = a.flightcycles;								
			row10.delays = a.delays;								
			row10.cancelations = a.cancelations;								
			row10.delayedminutes = a.delayedminutes;								
			row10.uncheduled = a.scheduled;								
			row10.scheduled = a.uncheduled;			

			nb_line_tUnite_1++;

//////////
 


	tos_count_tUnite_1++;

/**
 * [tUnite_1 main ] stop
 */
	
	/**
	 * [tUnite_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tUnite_1";

	

 



/**
 * [tUnite_1 process_data_begin ] stop
 */

	
	/**
	 * [tAggregateRow_1_AGGOUT main ] start
	 */

	

	
	
		currentVirtualComponent = "tAggregateRow_1";
	
	currentComponent="tAggregateRow_1_AGGOUT";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row10"
						
						);
					}
					
	
operation_finder_tAggregateRow_1.timeid = row10.timeid;
			operation_finder_tAggregateRow_1.aircraftid = row10.aircraftid;
			

	operation_finder_tAggregateRow_1.hashCodeDirty = true;
	
	operation_result_tAggregateRow_1 = hash_tAggregateRow_1.get(operation_finder_tAggregateRow_1);

	

	if(operation_result_tAggregateRow_1 == null) { // G_OutMain_AggR_001

		operation_result_tAggregateRow_1 = new AggOperationStruct_tAggregateRow_1();

		operation_result_tAggregateRow_1.timeid = operation_finder_tAggregateRow_1.timeid;
				operation_result_tAggregateRow_1.aircraftid = operation_finder_tAggregateRow_1.aircraftid;
				
		
		

		hash_tAggregateRow_1.put(operation_result_tAggregateRow_1, operation_result_tAggregateRow_1);
	
	} // G_OutMain_AggR_001


	
					if(operation_result_tAggregateRow_1.flighthours_sum == null) {
						operation_result_tAggregateRow_1.flighthours_sum = (long) 0;
					}
					
					if( row10.flighthours != null)
						operation_result_tAggregateRow_1.flighthours_sum += row10.flighthours;
					if(operation_result_tAggregateRow_1.uncheduled_sum == null) {
						operation_result_tAggregateRow_1.uncheduled_sum = (int) 0;
					}
					
					if( row10.uncheduled != null)
						operation_result_tAggregateRow_1.uncheduled_sum += row10.uncheduled;
					if(operation_result_tAggregateRow_1.scheduled_sum == null) {
						operation_result_tAggregateRow_1.scheduled_sum = (int) 0;
					}
					
					if( row10.scheduled != null)
						operation_result_tAggregateRow_1.scheduled_sum += row10.scheduled;
					if(operation_result_tAggregateRow_1.flightcycles_sum == null) {
						operation_result_tAggregateRow_1.flightcycles_sum = (long) 0;
					}
					
					if( row10.flightcycles != null)
						operation_result_tAggregateRow_1.flightcycles_sum += row10.flightcycles;
					if(operation_result_tAggregateRow_1.delays_sum == null) {
						operation_result_tAggregateRow_1.delays_sum = (long) 0;
					}
					
					if( row10.delays != null)
						operation_result_tAggregateRow_1.delays_sum += row10.delays;
					if(operation_result_tAggregateRow_1.cancelations_sum == null) {
						operation_result_tAggregateRow_1.cancelations_sum = (long) 0;
					}
					
					if( row10.cancelations != null)
						operation_result_tAggregateRow_1.cancelations_sum += row10.cancelations;
					if(operation_result_tAggregateRow_1.delayedminutes_sum == null) {
						operation_result_tAggregateRow_1.delayedminutes_sum = (long) 0;
					}
					
					if( row10.delayedminutes != null)
						operation_result_tAggregateRow_1.delayedminutes_sum += row10.delayedminutes;


 


	tos_count_tAggregateRow_1_AGGOUT++;

/**
 * [tAggregateRow_1_AGGOUT main ] stop
 */
	
	/**
	 * [tAggregateRow_1_AGGOUT process_data_begin ] start
	 */

	

	
	
		currentVirtualComponent = "tAggregateRow_1";
	
	currentComponent="tAggregateRow_1_AGGOUT";

	

 



/**
 * [tAggregateRow_1_AGGOUT process_data_begin ] stop
 */
	
	/**
	 * [tAggregateRow_1_AGGOUT process_data_end ] start
	 */

	

	
	
		currentVirtualComponent = "tAggregateRow_1";
	
	currentComponent="tAggregateRow_1_AGGOUT";

	

 



/**
 * [tAggregateRow_1_AGGOUT process_data_end ] stop
 */



	
	/**
	 * [tUnite_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tUnite_1";

	

 



/**
 * [tUnite_1 process_data_end ] stop
 */

} // End of branch "a"




	
	/**
	 * [tMap_4 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_4";

	

 



/**
 * [tMap_4 process_data_end ] stop
 */

} // End of branch "row8"




	
	/**
	 * [tFilterRow_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tFilterRow_1";

	

 



/**
 * [tFilterRow_1 process_data_end ] stop
 */

} // End of branch "filter"




	
	/**
	 * [tMap_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_1";

	

 



/**
 * [tMap_1 process_data_end ] stop
 */

} // End of branch "row3"




	
	/**
	 * [tJoin_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tJoin_1";

	

 



/**
 * [tJoin_1 process_data_end ] stop
 */



	
	/**
	 * [tDBInput_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBInput_1";

	

 



/**
 * [tDBInput_1 process_data_end ] stop
 */
	
	/**
	 * [tDBInput_1 end ] start
	 */

	

	
	
	currentComponent="tDBInput_1";

	

	}
}finally{
	if (rs_tDBInput_1 != null) {
		rs_tDBInput_1.close();
	}
	if (stmt_tDBInput_1 != null) {
		stmt_tDBInput_1.close();
	}
	if(conn_tDBInput_1 != null && !conn_tDBInput_1.isClosed()) {
		
			conn_tDBInput_1.commit();
			
		
			conn_tDBInput_1.close();
			
			if("com.mysql.cj.jdbc.Driver".equals((String)globalMap.get("driverClass_"))
			    && routines.system.BundleUtils.inOSGi()) {
			        Class.forName("com.mysql.cj.jdbc.AbandonedConnectionCleanupThread").
			            getMethod("checkedShutdown").invoke(null, (Object[]) null);
			}
			
	}
	
}
globalMap.put("tDBInput_1_NB_LINE",nb_line_tDBInput_1);
 

ok_Hash.put("tDBInput_1", true);
end_Hash.put("tDBInput_1", System.currentTimeMillis());




/**
 * [tDBInput_1 end ] stop
 */

	
	/**
	 * [tJoin_1 end ] start
	 */

	

	
	
	currentComponent="tJoin_1";

	

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row1");
			  	}
			  	
 

ok_Hash.put("tJoin_1", true);
end_Hash.put("tJoin_1", System.currentTimeMillis());




/**
 * [tJoin_1 end ] stop
 */

	
	/**
	 * [tMap_1 end ] start
	 */

	

	
	
	currentComponent="tMap_1";

	


// ###############################
// # Lookup hashes releasing
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row3");
			  	}
			  	
 

ok_Hash.put("tMap_1", true);
end_Hash.put("tMap_1", System.currentTimeMillis());




/**
 * [tMap_1 end ] stop
 */

	
	/**
	 * [tFilterRow_1 end ] start
	 */

	

	
	
	currentComponent="tFilterRow_1";

	
    globalMap.put("tFilterRow_1_NB_LINE", nb_line_tFilterRow_1);
    globalMap.put("tFilterRow_1_NB_LINE_OK", nb_line_ok_tFilterRow_1);
    globalMap.put("tFilterRow_1_NB_LINE_REJECT", nb_line_reject_tFilterRow_1);
    

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"filter");
			  	}
			  	
 

ok_Hash.put("tFilterRow_1", true);
end_Hash.put("tFilterRow_1", System.currentTimeMillis());




/**
 * [tFilterRow_1 end ] stop
 */

	
	/**
	 * [tMap_4 end ] start
	 */

	

	
	
	currentComponent="tMap_4";

	


// ###############################
// # Lookup hashes releasing
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row8");
			  	}
			  	
 

ok_Hash.put("tMap_4", true);
end_Hash.put("tMap_4", System.currentTimeMillis());




/**
 * [tMap_4 end ] stop
 */












	
	/**
	 * [tUnite_1 end ] start
	 */

	

	
	
	currentComponent="tUnite_1";

	

globalMap.put("tUnite_1_NB_LINE", nb_line_tUnite_1);
				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"tmap","a");
			  	}
			  	
 

ok_Hash.put("tUnite_1", true);
end_Hash.put("tUnite_1", System.currentTimeMillis());




/**
 * [tUnite_1 end ] stop
 */

	
	/**
	 * [tAggregateRow_1_AGGOUT end ] start
	 */

	

	
	
		currentVirtualComponent = "tAggregateRow_1";
	
	currentComponent="tAggregateRow_1_AGGOUT";

	

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row10");
			  	}
			  	
 

ok_Hash.put("tAggregateRow_1_AGGOUT", true);
end_Hash.put("tAggregateRow_1_AGGOUT", System.currentTimeMillis());




/**
 * [tAggregateRow_1_AGGOUT end ] stop
 */



	
	/**
	 * [tDBOutput_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBOutput_1", false);
		start_Hash.put("tDBOutput_1", System.currentTimeMillis());
		
	
	currentComponent="tDBOutput_1";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"dbout");
					}
				
		int tos_count_tDBOutput_1 = 0;
		






    
    int nb_line_tDBOutput_1 = 0;
    int nb_line_update_tDBOutput_1 = 0;
    int nb_line_inserted_tDBOutput_1 = 0;
    int nb_line_deleted_tDBOutput_1 = 0;
    int nb_line_rejected_tDBOutput_1 = 0;

    int tmp_batchUpdateCount_tDBOutput_1 = 0;

    int deletedCount_tDBOutput_1=0;
    int updatedCount_tDBOutput_1=0;
    int insertedCount_tDBOutput_1=0;
    int rowsToCommitCount_tDBOutput_1=0;
    int rejectedCount_tDBOutput_1=0;

    boolean whetherReject_tDBOutput_1 = false;

    java.sql.Connection conn_tDBOutput_1 = null;

    //optional table
    String dbschema_tDBOutput_1 = null;
    String tableName_tDBOutput_1 = null;
                    String driverClass_tDBOutput_1 = "oracle.jdbc.OracleDriver";


                java.lang.Class.forName(driverClass_tDBOutput_1);
                String url_tDBOutput_1 = null;
                    url_tDBOutput_1 = "jdbc:oracle:thin:@(description=(address=(protocol=tcp)(host=" + "oraclefib.fib.upc.edu" + ")(port=" + "1521" + "))(connect_data=(service_name=" + "orabd" + ")))";
                String dbUser_tDBOutput_1 = "joan.acero";
 
	final String decryptedPassword_tDBOutput_1 = routines.system.PasswordEncryptUtil.decryptPassword("enc:routine.encryption.key.v1:bM3XjALYVz/Gp6XmUbkEIkb0MC2oouSxLz10IV+5ili2XsJD");

                String dbPwd_tDBOutput_1 = decryptedPassword_tDBOutput_1;
                dbschema_tDBOutput_1 = "\"JOAN.ACERO\"";


                    conn_tDBOutput_1 = java.sql.DriverManager.getConnection(url_tDBOutput_1, dbUser_tDBOutput_1, dbPwd_tDBOutput_1);
        resourceMap.put("conn_tDBOutput_1", conn_tDBOutput_1);
            conn_tDBOutput_1.setAutoCommit(false);
            int commitEvery_tDBOutput_1 = 10000;
            int commitCounter_tDBOutput_1 = 0;
        int batchSize_tDBOutput_1 = 10000;
        int batchSizeCounter_tDBOutput_1=0;
        int count_tDBOutput_1=0;

        if(dbschema_tDBOutput_1 == null || dbschema_tDBOutput_1.trim().length() == 0) {
            tableName_tDBOutput_1 = ("AircraftUtilization");
        } else {
            tableName_tDBOutput_1 = dbschema_tDBOutput_1 + "." + ("AircraftUtilization");
        }
                String insert_tDBOutput_1 = "INSERT INTO " + tableName_tDBOutput_1 + " (aircraftID,timeID,FlightHours,FlightCycles,ScheduledOutOfService,UnscheduledOutOfService,Delays,Cancellations,DelayedMinutes) VALUES (?,?,?,?,?,?,?,?,?)";    

                        java.sql.PreparedStatement pstmt_tDBOutput_1 = conn_tDBOutput_1.prepareStatement(insert_tDBOutput_1);
                        resourceMap.put("pstmt_tDBOutput_1", pstmt_tDBOutput_1);





 



/**
 * [tDBOutput_1 begin ] stop
 */




	
	/**
	 * [tFileOutputDelimited_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileOutputDelimited_1", false);
		start_Hash.put("tFileOutputDelimited_1", System.currentTimeMillis());
		
	
	currentComponent="tFileOutputDelimited_1";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"prova1");
					}
				
		int tos_count_tFileOutputDelimited_1 = 0;
		

String fileName_tFileOutputDelimited_1 = "";
    fileName_tFileOutputDelimited_1 = (new java.io.File("C:/Users/joana/OneDrive/Desktop/AircraftUtilization.csv")).getAbsolutePath().replace("\\","/");
    String fullName_tFileOutputDelimited_1 = null;
    String extension_tFileOutputDelimited_1 = null;
    String directory_tFileOutputDelimited_1 = null;
    if((fileName_tFileOutputDelimited_1.indexOf("/") != -1)) {
        if(fileName_tFileOutputDelimited_1.lastIndexOf(".") < fileName_tFileOutputDelimited_1.lastIndexOf("/")) {
            fullName_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1;
            extension_tFileOutputDelimited_1 = "";
        } else {
            fullName_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1.substring(0, fileName_tFileOutputDelimited_1.lastIndexOf("."));
            extension_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1.substring(fileName_tFileOutputDelimited_1.lastIndexOf("."));
        }
        directory_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1.substring(0, fileName_tFileOutputDelimited_1.lastIndexOf("/"));
    } else {
        if(fileName_tFileOutputDelimited_1.lastIndexOf(".") != -1) {
            fullName_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1.substring(0, fileName_tFileOutputDelimited_1.lastIndexOf("."));
            extension_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1.substring(fileName_tFileOutputDelimited_1.lastIndexOf("."));
        } else {
            fullName_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1;
            extension_tFileOutputDelimited_1 = "";
        }
        directory_tFileOutputDelimited_1 = "";
    }
    boolean isFileGenerated_tFileOutputDelimited_1 = true;
    java.io.File filetFileOutputDelimited_1 = new java.io.File(fileName_tFileOutputDelimited_1);
    globalMap.put("tFileOutputDelimited_1_FILE_NAME",fileName_tFileOutputDelimited_1);
            int nb_line_tFileOutputDelimited_1 = 0;
            int splitedFileNo_tFileOutputDelimited_1 = 0;
            int currentRow_tFileOutputDelimited_1 = 0;

            final String OUT_DELIM_tFileOutputDelimited_1 = /** Start field tFileOutputDelimited_1:FIELDSEPARATOR */";"/** End field tFileOutputDelimited_1:FIELDSEPARATOR */;

            final String OUT_DELIM_ROWSEP_tFileOutputDelimited_1 = /** Start field tFileOutputDelimited_1:ROWSEPARATOR */"\n"/** End field tFileOutputDelimited_1:ROWSEPARATOR */;

                    //create directory only if not exists
                    if(directory_tFileOutputDelimited_1 != null && directory_tFileOutputDelimited_1.trim().length() != 0) {
                        java.io.File dir_tFileOutputDelimited_1 = new java.io.File(directory_tFileOutputDelimited_1);
                        if(!dir_tFileOutputDelimited_1.exists()) {
                            dir_tFileOutputDelimited_1.mkdirs();
                        }
                    }

                        //routines.system.Row
                        java.io.Writer outtFileOutputDelimited_1 = null;

                        java.io.File fileToDelete_tFileOutputDelimited_1 = new java.io.File(fileName_tFileOutputDelimited_1);
                        if(fileToDelete_tFileOutputDelimited_1.exists()) {
                            fileToDelete_tFileOutputDelimited_1.delete();
                        }
                        outtFileOutputDelimited_1 = new java.io.BufferedWriter(new java.io.OutputStreamWriter(
                        new java.io.FileOutputStream(fileName_tFileOutputDelimited_1, false),"ISO-8859-15"));


        resourceMap.put("out_tFileOutputDelimited_1", outtFileOutputDelimited_1);
resourceMap.put("nb_line_tFileOutputDelimited_1", nb_line_tFileOutputDelimited_1);

 



/**
 * [tFileOutputDelimited_1 begin ] stop
 */



	
	/**
	 * [tMap_5 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_5", false);
		start_Hash.put("tMap_5", System.currentTimeMillis());
		
	
	currentComponent="tMap_5";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row11");
					}
				
		int tos_count_tMap_5 = 0;
		




// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_5__Struct  {
}
Var__tMap_5__Struct Var__tMap_5 = new Var__tMap_5__Struct();
// ###############################

// ###############################
// # Outputs initialization
dboutStruct dbout_tmp = new dboutStruct();
prova1Struct prova1_tmp = new prova1Struct();
// ###############################

        
        



        









 



/**
 * [tMap_5 begin ] stop
 */



	
	/**
	 * [tAggregateRow_1_AGGIN begin ] start
	 */

	

	
		
		ok_Hash.put("tAggregateRow_1_AGGIN", false);
		start_Hash.put("tAggregateRow_1_AGGIN", System.currentTimeMillis());
		
	
		currentVirtualComponent = "tAggregateRow_1";
	
	currentComponent="tAggregateRow_1_AGGIN";

	
		int tos_count_tAggregateRow_1_AGGIN = 0;
		

java.util.Collection<AggOperationStruct_tAggregateRow_1> values_tAggregateRow_1 = hash_tAggregateRow_1.values();

globalMap.put("tAggregateRow_1_NB_LINE", values_tAggregateRow_1.size());

for(AggOperationStruct_tAggregateRow_1 aggregated_row_tAggregateRow_1 : values_tAggregateRow_1) { // G_AggR_600



 



/**
 * [tAggregateRow_1_AGGIN begin ] stop
 */
	
	/**
	 * [tAggregateRow_1_AGGIN main ] start
	 */

	

	
	
		currentVirtualComponent = "tAggregateRow_1";
	
	currentComponent="tAggregateRow_1_AGGIN";

	

            				    row11.timeid = aggregated_row_tAggregateRow_1.timeid;
            				    
            				    row11.aircraftid = aggregated_row_tAggregateRow_1.aircraftid;
            				    row11.flighthours = aggregated_row_tAggregateRow_1.flighthours_sum;
                                	row11.flightcycles = aggregated_row_tAggregateRow_1.flightcycles_sum;
                                	row11.delays = aggregated_row_tAggregateRow_1.delays_sum;
                                	row11.cancelations = aggregated_row_tAggregateRow_1.cancelations_sum;
                                	row11.delayedminutes = aggregated_row_tAggregateRow_1.delayedminutes_sum;
                                	row11.uncheduled = aggregated_row_tAggregateRow_1.uncheduled_sum;
                                	row11.scheduled = aggregated_row_tAggregateRow_1.scheduled_sum;
                                	

 


	tos_count_tAggregateRow_1_AGGIN++;

/**
 * [tAggregateRow_1_AGGIN main ] stop
 */
	
	/**
	 * [tAggregateRow_1_AGGIN process_data_begin ] start
	 */

	

	
	
		currentVirtualComponent = "tAggregateRow_1";
	
	currentComponent="tAggregateRow_1_AGGIN";

	

 



/**
 * [tAggregateRow_1_AGGIN process_data_begin ] stop
 */

	
	/**
	 * [tMap_5 main ] start
	 */

	

	
	
	currentComponent="tMap_5";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row11"
						
						);
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_5 = false;
		

        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_5 = false;
		  boolean mainRowRejected_tMap_5 = false;
            				    								  
		// ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_5__Struct Var = Var__tMap_5;// ###############################
        // ###############################
        // # Output tables

dbout = null;
prova1 = null;


// # Output table : 'dbout'
dbout_tmp.aircraftID = row11.aircraftid  ;
dbout_tmp.timeID = row11.timeid  ;
dbout_tmp.FlightHours = (int) Math.min(row11.flighthours, 99L) ;
dbout_tmp.FlightCycles = (int) Math.min(row11.flightcycles, 99L) ;
dbout_tmp.ScheduledOutOfService = (int) Math.min(row11.scheduled, 99L) ;
dbout_tmp.UnscheduledOutOfService = (int) Math.min(row11.uncheduled, 99L) ;
dbout_tmp.Delays = (int) Math.min(row11.delays, 99L) ;
dbout_tmp.Cancellations = (int) Math.min(row11.cancelations, 99L) ;
dbout_tmp.DelayedMinutes = (int) Math.min(row11.delayedminutes, 99L) ;
dbout = dbout_tmp;

// # Output table : 'prova1'
prova1_tmp.aircraftID = row11.aircraftid   ;
prova1_tmp.timeID = row11.timeid   ;
prova1_tmp.FlightHours = (int) Math.min(row11.flighthours, 99L)  ;
prova1_tmp.FlightCycles = (int) Math.min(row11.flightcycles, 99L)  ;
prova1_tmp.ScheduledOutOfService = (int) Math.min(row11.scheduled, 99L)  ;
prova1_tmp.UnscheduledOutOfService = (int) Math.min(row11.uncheduled, 99L)  ;
prova1_tmp.Delays = (int) Math.min(row11.delays, 99L)  ;
prova1_tmp.Cancellations = (int) Math.min(row11.cancelations, 99L)  ;
prova1_tmp.DelayedMinutes = (int) Math.min(row11.delayedminutes, 99L)  ;
prova1 = prova1_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_5 = false;










 


	tos_count_tMap_5++;

/**
 * [tMap_5 main ] stop
 */
	
	/**
	 * [tMap_5 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_5";

	

 



/**
 * [tMap_5 process_data_begin ] stop
 */
// Start of branch "dbout"
if(dbout != null) { 



	
	/**
	 * [tDBOutput_1 main ] start
	 */

	

	
	
	currentComponent="tDBOutput_1";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"dbout"
						
						);
					}
					



        whetherReject_tDBOutput_1 = false;
                        if(dbout.aircraftID == null) {
pstmt_tDBOutput_1.setNull(1, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(1, dbout.aircraftID);
}

                        if(dbout.timeID != null) {
pstmt_tDBOutput_1.setObject(2, new java.sql.Timestamp(dbout.timeID.getTime()),java.sql.Types.DATE);
} else {
pstmt_tDBOutput_1.setNull(2, java.sql.Types.DATE);
}

                        if(dbout.FlightHours == null) {
pstmt_tDBOutput_1.setNull(3, java.sql.Types.INTEGER);
} else {pstmt_tDBOutput_1.setInt(3, dbout.FlightHours);
}

                        if(dbout.FlightCycles == null) {
pstmt_tDBOutput_1.setNull(4, java.sql.Types.INTEGER);
} else {pstmt_tDBOutput_1.setInt(4, dbout.FlightCycles);
}

                        if(dbout.ScheduledOutOfService == null) {
pstmt_tDBOutput_1.setNull(5, java.sql.Types.INTEGER);
} else {pstmt_tDBOutput_1.setInt(5, dbout.ScheduledOutOfService);
}

                        if(dbout.UnscheduledOutOfService == null) {
pstmt_tDBOutput_1.setNull(6, java.sql.Types.INTEGER);
} else {pstmt_tDBOutput_1.setInt(6, dbout.UnscheduledOutOfService);
}

                        if(dbout.Delays == null) {
pstmt_tDBOutput_1.setNull(7, java.sql.Types.INTEGER);
} else {pstmt_tDBOutput_1.setInt(7, dbout.Delays);
}

                        if(dbout.Cancellations == null) {
pstmt_tDBOutput_1.setNull(8, java.sql.Types.INTEGER);
} else {pstmt_tDBOutput_1.setInt(8, dbout.Cancellations);
}

                        if(dbout.DelayedMinutes == null) {
pstmt_tDBOutput_1.setNull(9, java.sql.Types.INTEGER);
} else {pstmt_tDBOutput_1.setInt(9, dbout.DelayedMinutes);
}

                pstmt_tDBOutput_1.addBatch();
                nb_line_tDBOutput_1++;
                batchSizeCounter_tDBOutput_1++;
            if (batchSize_tDBOutput_1 > 0 &&  batchSize_tDBOutput_1 <= batchSizeCounter_tDBOutput_1) {
                try {
                    pstmt_tDBOutput_1.executeBatch();
                }catch (java.sql.BatchUpdateException e_tDBOutput_1){
globalMap.put("tDBOutput_1_ERROR_MESSAGE",e_tDBOutput_1.getMessage());
			        java.sql.SQLException ne_tDBOutput_1 = e_tDBOutput_1.getNextException(),sqle_tDBOutput_1=null;
			    	String errormessage_tDBOutput_1;
					if (ne_tDBOutput_1 != null) {
						// build new exception to provide the original cause
						sqle_tDBOutput_1 = new java.sql.SQLException(e_tDBOutput_1.getMessage() + "\ncaused by: " + ne_tDBOutput_1.getMessage(), ne_tDBOutput_1.getSQLState(), ne_tDBOutput_1.getErrorCode(), ne_tDBOutput_1);
						errormessage_tDBOutput_1 = sqle_tDBOutput_1.getMessage();
					}else{
						errormessage_tDBOutput_1 = e_tDBOutput_1.getMessage();
					}
	            	
	                	System.err.println(errormessage_tDBOutput_1);
	            	
	        	}
                tmp_batchUpdateCount_tDBOutput_1 = pstmt_tDBOutput_1.getUpdateCount();
                    insertedCount_tDBOutput_1
                += (tmp_batchUpdateCount_tDBOutput_1!=-1?tmp_batchUpdateCount_tDBOutput_1:0);
                rowsToCommitCount_tDBOutput_1 += (tmp_batchUpdateCount_tDBOutput_1!=-1?tmp_batchUpdateCount_tDBOutput_1:0);
                batchSizeCounter_tDBOutput_1 = 0;
            }
                commitCounter_tDBOutput_1++;
                if(commitEvery_tDBOutput_1 <= commitCounter_tDBOutput_1) {
                    if(batchSizeCounter_tDBOutput_1 > 0) {
                        try {
                            pstmt_tDBOutput_1.executeBatch();
                        }catch (java.sql.BatchUpdateException e_tDBOutput_1){
globalMap.put("tDBOutput_1_ERROR_MESSAGE",e_tDBOutput_1.getMessage());
					        java.sql.SQLException ne_tDBOutput_1 = e_tDBOutput_1.getNextException(),sqle_tDBOutput_1=null;
					    	String errormessage_tDBOutput_1;
							if (ne_tDBOutput_1 != null) {
								// build new exception to provide the original cause
								sqle_tDBOutput_1 = new java.sql.SQLException(e_tDBOutput_1.getMessage() + "\ncaused by: " + ne_tDBOutput_1.getMessage(), ne_tDBOutput_1.getSQLState(), ne_tDBOutput_1.getErrorCode(), ne_tDBOutput_1);
								errormessage_tDBOutput_1 = sqle_tDBOutput_1.getMessage();
							}else{
								errormessage_tDBOutput_1 = e_tDBOutput_1.getMessage();
							}
			            	
			                	System.err.println(errormessage_tDBOutput_1);
			            	
			        	}
                        tmp_batchUpdateCount_tDBOutput_1 = pstmt_tDBOutput_1.getUpdateCount();
                            insertedCount_tDBOutput_1
                        += (tmp_batchUpdateCount_tDBOutput_1!=-1?tmp_batchUpdateCount_tDBOutput_1:0);
                        rowsToCommitCount_tDBOutput_1 += (tmp_batchUpdateCount_tDBOutput_1!=-1?tmp_batchUpdateCount_tDBOutput_1:0);
                    }
                    if(rowsToCommitCount_tDBOutput_1 != 0){
                    	
                    }
                    conn_tDBOutput_1.commit();
                    if(rowsToCommitCount_tDBOutput_1 != 0){
                    	
                    	rowsToCommitCount_tDBOutput_1 = 0;
                    }
                    commitCounter_tDBOutput_1=0;
                    	batchSizeCounter_tDBOutput_1=0;
                }

 


	tos_count_tDBOutput_1++;

/**
 * [tDBOutput_1 main ] stop
 */
	
	/**
	 * [tDBOutput_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBOutput_1";

	

 



/**
 * [tDBOutput_1 process_data_begin ] stop
 */
	
	/**
	 * [tDBOutput_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBOutput_1";

	

 



/**
 * [tDBOutput_1 process_data_end ] stop
 */

} // End of branch "dbout"




// Start of branch "prova1"
if(prova1 != null) { 



	
	/**
	 * [tFileOutputDelimited_1 main ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_1";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"prova1"
						
						);
					}
					


                    StringBuilder sb_tFileOutputDelimited_1 = new StringBuilder();
                            if(prova1.aircraftID != null) {
                        sb_tFileOutputDelimited_1.append(
                            prova1.aircraftID
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(prova1.timeID != null) {
                        sb_tFileOutputDelimited_1.append(
                            FormatterUtils.format_Date(prova1.timeID, "dd-MM-yyyy")
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(prova1.FlightHours != null) {
                        sb_tFileOutputDelimited_1.append(
                            prova1.FlightHours
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(prova1.FlightCycles != null) {
                        sb_tFileOutputDelimited_1.append(
                            prova1.FlightCycles
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(prova1.ScheduledOutOfService != null) {
                        sb_tFileOutputDelimited_1.append(
                            prova1.ScheduledOutOfService
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(prova1.UnscheduledOutOfService != null) {
                        sb_tFileOutputDelimited_1.append(
                            prova1.UnscheduledOutOfService
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(prova1.Delays != null) {
                        sb_tFileOutputDelimited_1.append(
                            prova1.Delays
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(prova1.Cancellations != null) {
                        sb_tFileOutputDelimited_1.append(
                            prova1.Cancellations
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(prova1.DelayedMinutes != null) {
                        sb_tFileOutputDelimited_1.append(
                            prova1.DelayedMinutes
                        );
                            }
                    sb_tFileOutputDelimited_1.append(OUT_DELIM_ROWSEP_tFileOutputDelimited_1);


                    nb_line_tFileOutputDelimited_1++;
                    resourceMap.put("nb_line_tFileOutputDelimited_1", nb_line_tFileOutputDelimited_1);

                        outtFileOutputDelimited_1.write(sb_tFileOutputDelimited_1.toString());




 


	tos_count_tFileOutputDelimited_1++;

/**
 * [tFileOutputDelimited_1 main ] stop
 */
	
	/**
	 * [tFileOutputDelimited_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_1";

	

 



/**
 * [tFileOutputDelimited_1 process_data_begin ] stop
 */
	
	/**
	 * [tFileOutputDelimited_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_1";

	

 



/**
 * [tFileOutputDelimited_1 process_data_end ] stop
 */

} // End of branch "prova1"




	
	/**
	 * [tMap_5 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_5";

	

 



/**
 * [tMap_5 process_data_end ] stop
 */



	
	/**
	 * [tAggregateRow_1_AGGIN process_data_end ] start
	 */

	

	
	
		currentVirtualComponent = "tAggregateRow_1";
	
	currentComponent="tAggregateRow_1_AGGIN";

	

 



/**
 * [tAggregateRow_1_AGGIN process_data_end ] stop
 */
	
	/**
	 * [tAggregateRow_1_AGGIN end ] start
	 */

	

	
	
		currentVirtualComponent = "tAggregateRow_1";
	
	currentComponent="tAggregateRow_1_AGGIN";

	

} // G_AggR_600

 

ok_Hash.put("tAggregateRow_1_AGGIN", true);
end_Hash.put("tAggregateRow_1_AGGIN", System.currentTimeMillis());




/**
 * [tAggregateRow_1_AGGIN end ] stop
 */

	
	/**
	 * [tMap_5 end ] start
	 */

	

	
	
	currentComponent="tMap_5";

	


// ###############################
// # Lookup hashes releasing
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row11");
			  	}
			  	
 

ok_Hash.put("tMap_5", true);
end_Hash.put("tMap_5", System.currentTimeMillis());




/**
 * [tMap_5 end ] stop
 */

	
	/**
	 * [tDBOutput_1 end ] start
	 */

	

	
	
	currentComponent="tDBOutput_1";

	
	



	
        if(batchSizeCounter_tDBOutput_1 > 0) {
            try {
            	if (pstmt_tDBOutput_1 != null) {
					
					pstmt_tDBOutput_1.executeBatch();
					
        	    }
            }catch (java.sql.BatchUpdateException e_tDBOutput_1){
globalMap.put("tDBOutput_1_ERROR_MESSAGE",e_tDBOutput_1.getMessage());
		        java.sql.SQLException ne_tDBOutput_1 = e_tDBOutput_1.getNextException(),sqle_tDBOutput_1=null;
		    	String errormessage_tDBOutput_1;
				if (ne_tDBOutput_1 != null) {
					// build new exception to provide the original cause
					sqle_tDBOutput_1 = new java.sql.SQLException(e_tDBOutput_1.getMessage() + "\ncaused by: " + ne_tDBOutput_1.getMessage(), ne_tDBOutput_1.getSQLState(), ne_tDBOutput_1.getErrorCode(), ne_tDBOutput_1);
					errormessage_tDBOutput_1 = sqle_tDBOutput_1.getMessage();
				}else{
					errormessage_tDBOutput_1 = e_tDBOutput_1.getMessage();
				}
            	
                	System.err.println(errormessage_tDBOutput_1);
            	
        	}
        	if (pstmt_tDBOutput_1 != null) {
            	tmp_batchUpdateCount_tDBOutput_1 = pstmt_tDBOutput_1.getUpdateCount();
    	    	
    	    		insertedCount_tDBOutput_1
    	    	
    	    	+= (tmp_batchUpdateCount_tDBOutput_1!=-1?tmp_batchUpdateCount_tDBOutput_1:0);
				rowsToCommitCount_tDBOutput_1 += (tmp_batchUpdateCount_tDBOutput_1!=-1?tmp_batchUpdateCount_tDBOutput_1:0);
            }
        }
        if(pstmt_tDBOutput_1 != null) {
			
				pstmt_tDBOutput_1.close();
				resourceMap.remove("pstmt_tDBOutput_1");
			
        }
    resourceMap.put("statementClosed_tDBOutput_1", true);
		if(commitCounter_tDBOutput_1 > 0 && rowsToCommitCount_tDBOutput_1 != 0) {
			
		}
		conn_tDBOutput_1.commit();
		if(commitCounter_tDBOutput_1 > 0 && rowsToCommitCount_tDBOutput_1 != 0) {
			
			rowsToCommitCount_tDBOutput_1 = 0;
		}
		commitCounter_tDBOutput_1 = 0;
		
		
		conn_tDBOutput_1 .close();
		
		resourceMap.put("finish_tDBOutput_1", true);
   	

	
	nb_line_deleted_tDBOutput_1=nb_line_deleted_tDBOutput_1+ deletedCount_tDBOutput_1;
	nb_line_update_tDBOutput_1=nb_line_update_tDBOutput_1 + updatedCount_tDBOutput_1;
	nb_line_inserted_tDBOutput_1=nb_line_inserted_tDBOutput_1 + insertedCount_tDBOutput_1;
	nb_line_rejected_tDBOutput_1=nb_line_rejected_tDBOutput_1 + rejectedCount_tDBOutput_1;
	
        globalMap.put("tDBOutput_1_NB_LINE",nb_line_tDBOutput_1);
        globalMap.put("tDBOutput_1_NB_LINE_UPDATED",nb_line_update_tDBOutput_1);
        globalMap.put("tDBOutput_1_NB_LINE_INSERTED",nb_line_inserted_tDBOutput_1);
        globalMap.put("tDBOutput_1_NB_LINE_DELETED",nb_line_deleted_tDBOutput_1);
        globalMap.put("tDBOutput_1_NB_LINE_REJECTED", nb_line_rejected_tDBOutput_1);
    

	



				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"dbout");
			  	}
			  	
 

ok_Hash.put("tDBOutput_1", true);
end_Hash.put("tDBOutput_1", System.currentTimeMillis());




/**
 * [tDBOutput_1 end ] stop
 */




	
	/**
	 * [tFileOutputDelimited_1 end ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_1";

	



		
			
					if(outtFileOutputDelimited_1!=null) {
						outtFileOutputDelimited_1.flush();
						outtFileOutputDelimited_1.close();
					}
				
				globalMap.put("tFileOutputDelimited_1_NB_LINE",nb_line_tFileOutputDelimited_1);
				globalMap.put("tFileOutputDelimited_1_FILE_NAME",fileName_tFileOutputDelimited_1);
			
		
		
		resourceMap.put("finish_tFileOutputDelimited_1", true);
	

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"prova1");
			  	}
			  	
 

ok_Hash.put("tFileOutputDelimited_1", true);
end_Hash.put("tFileOutputDelimited_1", System.currentTimeMillis());




/**
 * [tFileOutputDelimited_1 end ] stop
 */












				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
					te.setVirtualComponentName(currentVirtualComponent);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
							//free memory for "tAggregateRow_1_AGGIN"
							globalMap.remove("tAggregateRow_1");
						      	
					      			//free memory for "tJoin_1"
									globalMap.remove("tHash_row7");
				      			
				try{
					
	
	/**
	 * [tDBInput_5 finally ] start
	 */

	

	
	
	currentComponent="tDBInput_5";

	

 



/**
 * [tDBInput_5 finally ] stop
 */

	
	/**
	 * [tMap_3 finally ] start
	 */

	

	
	
	currentComponent="tMap_3";

	

 



/**
 * [tMap_3 finally ] stop
 */



	
	/**
	 * [tDBInput_1 finally ] start
	 */

	

	
	
	currentComponent="tDBInput_1";

	

 



/**
 * [tDBInput_1 finally ] stop
 */

	
	/**
	 * [tJoin_1 finally ] start
	 */

	

	
	
	currentComponent="tJoin_1";

	

 



/**
 * [tJoin_1 finally ] stop
 */

	
	/**
	 * [tMap_1 finally ] start
	 */

	

	
	
	currentComponent="tMap_1";

	

 



/**
 * [tMap_1 finally ] stop
 */

	
	/**
	 * [tFilterRow_1 finally ] start
	 */

	

	
	
	currentComponent="tFilterRow_1";

	

 



/**
 * [tFilterRow_1 finally ] stop
 */

	
	/**
	 * [tMap_4 finally ] start
	 */

	

	
	
	currentComponent="tMap_4";

	

 



/**
 * [tMap_4 finally ] stop
 */












	
	/**
	 * [tUnite_1 finally ] start
	 */

	

	
	
	currentComponent="tUnite_1";

	

 



/**
 * [tUnite_1 finally ] stop
 */

	
	/**
	 * [tAggregateRow_1_AGGOUT finally ] start
	 */

	

	
	
		currentVirtualComponent = "tAggregateRow_1";
	
	currentComponent="tAggregateRow_1_AGGOUT";

	

 



/**
 * [tAggregateRow_1_AGGOUT finally ] stop
 */

	
	/**
	 * [tAggregateRow_1_AGGIN finally ] start
	 */

	

	
	
		currentVirtualComponent = "tAggregateRow_1";
	
	currentComponent="tAggregateRow_1_AGGIN";

	

 



/**
 * [tAggregateRow_1_AGGIN finally ] stop
 */

	
	/**
	 * [tMap_5 finally ] start
	 */

	

	
	
	currentComponent="tMap_5";

	

 



/**
 * [tMap_5 finally ] stop
 */

	
	/**
	 * [tDBOutput_1 finally ] start
	 */

	

	
	
	currentComponent="tDBOutput_1";

	



    try {
    if (resourceMap.get("statementClosed_tDBOutput_1") == null) {
                java.sql.PreparedStatement pstmtToClose_tDBOutput_1 = null;
                if ((pstmtToClose_tDBOutput_1 = (java.sql.PreparedStatement) resourceMap.remove("pstmt_tDBOutput_1")) != null) {
                    pstmtToClose_tDBOutput_1.close();
                }
    }
    } finally {
        if(resourceMap.get("finish_tDBOutput_1") == null){
            java.sql.Connection ctn_tDBOutput_1 = null;
            if((ctn_tDBOutput_1 = (java.sql.Connection)resourceMap.get("conn_tDBOutput_1")) != null){
                try {
                    ctn_tDBOutput_1.close();
                } catch (java.sql.SQLException sqlEx_tDBOutput_1) {
                    String errorMessage_tDBOutput_1 = "failed to close the connection in tDBOutput_1 :" + sqlEx_tDBOutput_1.getMessage();
                    System.err.println(errorMessage_tDBOutput_1);
                }
            }
        }
    }
 



/**
 * [tDBOutput_1 finally ] stop
 */




	
	/**
	 * [tFileOutputDelimited_1 finally ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_1";

	


		if(resourceMap.get("finish_tFileOutputDelimited_1") == null){ 
			
				
						java.io.Writer outtFileOutputDelimited_1 = (java.io.Writer)resourceMap.get("out_tFileOutputDelimited_1");
						if(outtFileOutputDelimited_1!=null) {
							outtFileOutputDelimited_1.flush();
							outtFileOutputDelimited_1.close();
						}
					
				
			
		}
	

 



/**
 * [tFileOutputDelimited_1 finally ] stop
 */












				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBInput_5_SUBPROCESS_STATE", 1);
	}
	


public static class row7Struct implements routines.system.IPersistableComparableLookupRow<row7Struct> {
    final static byte[] commonByteArrayLock_DW_PROJECT2_AircraftUtilization = new byte[0];
    static byte[] commonByteArray_DW_PROJECT2_AircraftUtilization = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public String aircraftregistration;

				public String getAircraftregistration () {
					return this.aircraftregistration;
				}
				
			    public String yearmonth;

				public String getYearmonth () {
					return this.yearmonth;
				}
				
			    public Double unscheduledhours2;

				public Double getUnscheduledhours2 () {
					return this.unscheduledhours2;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.aircraftregistration == null) ? 0 : this.aircraftregistration.hashCode());
					
						result = prime * result + ((this.yearmonth == null) ? 0 : this.yearmonth.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row7Struct other = (row7Struct) obj;
		
						if (this.aircraftregistration == null) {
							if (other.aircraftregistration != null)
								return false;
						
						} else if (!this.aircraftregistration.equals(other.aircraftregistration))
						
							return false;
					
						if (this.yearmonth == null) {
							if (other.yearmonth != null)
								return false;
						
						} else if (!this.yearmonth.equals(other.yearmonth))
						
							return false;
					

		return true;
    }

	public void copyDataTo(row7Struct other) {

		other.aircraftregistration = this.aircraftregistration;
	            other.yearmonth = this.yearmonth;
	            other.unscheduledhours2 = this.unscheduledhours2;
	            
	}

	public void copyKeysDataTo(row7Struct other) {

		other.aircraftregistration = this.aircraftregistration;
	            	other.yearmonth = this.yearmonth;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_DW_PROJECT2_AircraftUtilization.length) {
				if(length < 1024 && commonByteArray_DW_PROJECT2_AircraftUtilization.length == 0) {
   					commonByteArray_DW_PROJECT2_AircraftUtilization = new byte[1024];
				} else {
   					commonByteArray_DW_PROJECT2_AircraftUtilization = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_DW_PROJECT2_AircraftUtilization, 0, length);
			strReturn = new String(commonByteArray_DW_PROJECT2_AircraftUtilization, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_DW_PROJECT2_AircraftUtilization.length) {
				if(length < 1024 && commonByteArray_DW_PROJECT2_AircraftUtilization.length == 0) {
   					commonByteArray_DW_PROJECT2_AircraftUtilization = new byte[1024];
				} else {
   					commonByteArray_DW_PROJECT2_AircraftUtilization = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_DW_PROJECT2_AircraftUtilization, 0, length);
			strReturn = new String(commonByteArray_DW_PROJECT2_AircraftUtilization, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readKeysData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_DW_PROJECT2_AircraftUtilization) {

        	try {

        		int length = 0;
		
					this.aircraftregistration = readString(dis);
					
					this.yearmonth = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readKeysData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_DW_PROJECT2_AircraftUtilization) {

        	try {

        		int length = 0;
		
					this.aircraftregistration = readString(dis);
					
					this.yearmonth = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeKeysData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.aircraftregistration,dos);
					
					// String
				
						writeString(this.yearmonth,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeKeysData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.aircraftregistration,dos);
					
					// String
				
						writeString(this.yearmonth,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }



    /**
     * Fill Values data by reading ObjectInputStream.
     */
    public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
        try {

			int length = 0;
		
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.unscheduledhours2 = null;
           				} else {
           			    	this.unscheduledhours2 = dis.readDouble();
           				}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

    }
    
    public void readValuesData(DataInputStream dis, org.jboss.marshalling.Unmarshaller objectIn) {
        try {
			int length = 0;
		
			            length = objectIn.readByte();
           				if (length == -1) {
           	    			this.unscheduledhours2 = null;
           				} else {
           			    	this.unscheduledhours2 = objectIn.readDouble();
           				}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

    }

    /**
     * Return a byte array which represents Values data.
     */
    public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
        try {

		
						if(this.unscheduledhours2 == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.unscheduledhours2);
		            	}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}

    }
    
    public void writeValuesData(DataOutputStream dos, org.jboss.marshalling.Marshaller objectOut){
                try {

		
						if(this.unscheduledhours2 == null) {
							objectOut.writeByte(-1);
						} else {
							objectOut.writeByte(0);
							objectOut.writeDouble(this.unscheduledhours2);
		            	}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}
    }


    
    public boolean supportMarshaller(){
        return true;
    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("aircraftregistration="+aircraftregistration);
		sb.append(",yearmonth="+yearmonth);
		sb.append(",unscheduledhours2="+String.valueOf(unscheduledhours2));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row7Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.aircraftregistration, other.aircraftregistration);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.yearmonth, other.yearmonth);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row2Struct implements routines.system.IPersistableRow<row2Struct> {
    final static byte[] commonByteArrayLock_DW_PROJECT2_AircraftUtilization = new byte[0];
    static byte[] commonByteArray_DW_PROJECT2_AircraftUtilization = new byte[0];

	
			    public String aircraftregistration;

				public String getAircraftregistration () {
					return this.aircraftregistration;
				}
				
			    public String yearmonth;

				public String getYearmonth () {
					return this.yearmonth;
				}
				
			    public Double unscheduledhours2;

				public Double getUnscheduledhours2 () {
					return this.unscheduledhours2;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_DW_PROJECT2_AircraftUtilization.length) {
				if(length < 1024 && commonByteArray_DW_PROJECT2_AircraftUtilization.length == 0) {
   					commonByteArray_DW_PROJECT2_AircraftUtilization = new byte[1024];
				} else {
   					commonByteArray_DW_PROJECT2_AircraftUtilization = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_DW_PROJECT2_AircraftUtilization, 0, length);
			strReturn = new String(commonByteArray_DW_PROJECT2_AircraftUtilization, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_DW_PROJECT2_AircraftUtilization.length) {
				if(length < 1024 && commonByteArray_DW_PROJECT2_AircraftUtilization.length == 0) {
   					commonByteArray_DW_PROJECT2_AircraftUtilization = new byte[1024];
				} else {
   					commonByteArray_DW_PROJECT2_AircraftUtilization = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_DW_PROJECT2_AircraftUtilization, 0, length);
			strReturn = new String(commonByteArray_DW_PROJECT2_AircraftUtilization, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_DW_PROJECT2_AircraftUtilization) {

        	try {

        		int length = 0;
		
					this.aircraftregistration = readString(dis);
					
					this.yearmonth = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.unscheduledhours2 = null;
           				} else {
           			    	this.unscheduledhours2 = dis.readDouble();
           				}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_DW_PROJECT2_AircraftUtilization) {

        	try {

        		int length = 0;
		
					this.aircraftregistration = readString(dis);
					
					this.yearmonth = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.unscheduledhours2 = null;
           				} else {
           			    	this.unscheduledhours2 = dis.readDouble();
           				}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.aircraftregistration,dos);
					
					// String
				
						writeString(this.yearmonth,dos);
					
					// Double
				
						if(this.unscheduledhours2 == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.unscheduledhours2);
		            	}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.aircraftregistration,dos);
					
					// String
				
						writeString(this.yearmonth,dos);
					
					// Double
				
						if(this.unscheduledhours2 == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.unscheduledhours2);
		            	}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("aircraftregistration="+aircraftregistration);
		sb.append(",yearmonth="+yearmonth);
		sb.append(",unscheduledhours2="+String.valueOf(unscheduledhours2));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row2Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class after_tDBInput_2Struct implements routines.system.IPersistableRow<after_tDBInput_2Struct> {
    final static byte[] commonByteArrayLock_DW_PROJECT2_AircraftUtilization = new byte[0];
    static byte[] commonByteArray_DW_PROJECT2_AircraftUtilization = new byte[0];

	
			    public String aircraftregistration;

				public String getAircraftregistration () {
					return this.aircraftregistration;
				}
				
			    public String yearmonth;

				public String getYearmonth () {
					return this.yearmonth;
				}
				
			    public Double unscheduledhours2;

				public Double getUnscheduledhours2 () {
					return this.unscheduledhours2;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_DW_PROJECT2_AircraftUtilization.length) {
				if(length < 1024 && commonByteArray_DW_PROJECT2_AircraftUtilization.length == 0) {
   					commonByteArray_DW_PROJECT2_AircraftUtilization = new byte[1024];
				} else {
   					commonByteArray_DW_PROJECT2_AircraftUtilization = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_DW_PROJECT2_AircraftUtilization, 0, length);
			strReturn = new String(commonByteArray_DW_PROJECT2_AircraftUtilization, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_DW_PROJECT2_AircraftUtilization.length) {
				if(length < 1024 && commonByteArray_DW_PROJECT2_AircraftUtilization.length == 0) {
   					commonByteArray_DW_PROJECT2_AircraftUtilization = new byte[1024];
				} else {
   					commonByteArray_DW_PROJECT2_AircraftUtilization = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_DW_PROJECT2_AircraftUtilization, 0, length);
			strReturn = new String(commonByteArray_DW_PROJECT2_AircraftUtilization, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_DW_PROJECT2_AircraftUtilization) {

        	try {

        		int length = 0;
		
					this.aircraftregistration = readString(dis);
					
					this.yearmonth = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.unscheduledhours2 = null;
           				} else {
           			    	this.unscheduledhours2 = dis.readDouble();
           				}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_DW_PROJECT2_AircraftUtilization) {

        	try {

        		int length = 0;
		
					this.aircraftregistration = readString(dis);
					
					this.yearmonth = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.unscheduledhours2 = null;
           				} else {
           			    	this.unscheduledhours2 = dis.readDouble();
           				}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.aircraftregistration,dos);
					
					// String
				
						writeString(this.yearmonth,dos);
					
					// Double
				
						if(this.unscheduledhours2 == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.unscheduledhours2);
		            	}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.aircraftregistration,dos);
					
					// String
				
						writeString(this.yearmonth,dos);
					
					// Double
				
						if(this.unscheduledhours2 == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.unscheduledhours2);
		            	}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("aircraftregistration="+aircraftregistration);
		sb.append(",yearmonth="+yearmonth);
		sb.append(",unscheduledhours2="+String.valueOf(unscheduledhours2));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(after_tDBInput_2Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tDBInput_2Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBInput_2_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;


		tDBInput_3Process(globalMap);

		row2Struct row2 = new row2Struct();
row7Struct row7 = new row7Struct();





	
	/**
	 * [tHash_row7 begin ] start
	 */

	

	
		
		ok_Hash.put("tHash_row7", false);
		start_Hash.put("tHash_row7", System.currentTimeMillis());
		
	
	currentComponent="tHash_row7";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row7");
					}
				
		int tos_count_tHash_row7 = 0;
		

				java.util.Map<row7Struct, row7Struct> tHash_row7 = new java.util.LinkedHashMap<row7Struct, row7Struct>();
	            globalMap.put("tHash_row7", tHash_row7);
			
            

 



/**
 * [tHash_row7 begin ] stop
 */



	
	/**
	 * [tJoin_3 begin ] start
	 */

	

	
		
		ok_Hash.put("tJoin_3", false);
		start_Hash.put("tJoin_3", System.currentTimeMillis());
		
	
	currentComponent="tJoin_3";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row2");
					}
				
		int tos_count_tJoin_3 = 0;
		
    final java.util.Map<TRIMflightIDStruct, TRIMflightIDStruct> tHash_tJoin_3 = (java.util.Map<TRIMflightIDStruct, TRIMflightIDStruct>) globalMap.get("tHash_TRIMflightID");
    
    class Util_tJoin_3
    {
        TRIMflightIDStruct lookupValue = null;
        TRIMflightIDStruct TRIMflightIDHashKey = new TRIMflightIDStruct(); 
        
        public boolean isJoined(row2Struct mainRow) {                        
           TRIMflightIDHashKey.aircraftRegi = mainRow.aircraftregistration;

			TRIMflightIDHashKey.hashCodeDirty = true;			             
            lookupValue = tHash_tJoin_3.get(TRIMflightIDHashKey);            
            if(lookupValue != null){
            	return true;
            }else{
            }  
            return false;
        }
    }
        
	Util_tJoin_3 util_tJoin_3 = new Util_tJoin_3();
        
    int nb_line_tJoin_3 = 0; 
 



/**
 * [tJoin_3 begin ] stop
 */



	
	/**
	 * [tDBInput_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBInput_2", false);
		start_Hash.put("tDBInput_2", System.currentTimeMillis());
		
	
	currentComponent="tDBInput_2";

	
		int tos_count_tDBInput_2 = 0;
		
	
    
	
		    int nb_line_tDBInput_2 = 0;
		    java.sql.Connection conn_tDBInput_2 = null;
				String driverClass_tDBInput_2 = "org.postgresql.Driver";
			    java.lang.Class jdbcclazz_tDBInput_2 = java.lang.Class.forName(driverClass_tDBInput_2);
				String dbUser_tDBInput_2 = "joan.acero";
				
				 
	final String decryptedPassword_tDBInput_2 = routines.system.PasswordEncryptUtil.decryptPassword("enc:routine.encryption.key.v1:O1LWPHsb8ODcUMGj0XynpZ34VkBRgprVlIsVx1sTeNLpJMv5");
				
				String dbPwd_tDBInput_2 = decryptedPassword_tDBInput_2;
				
				String url_tDBInput_2 = "jdbc:postgresql://" + "postgresfib.fib.upc.edu" + ":" + "6433" + "/" + "AMOS";
				
				conn_tDBInput_2 = java.sql.DriverManager.getConnection(url_tDBInput_2,dbUser_tDBInput_2,dbPwd_tDBInput_2);
		        
				conn_tDBInput_2.setAutoCommit(false);
			
		    
			java.sql.Statement stmt_tDBInput_2 = conn_tDBInput_2.createStatement();

		    String dbquery_tDBInput_2 = "SELECT \n    aircraftRegistration,\n    startTime AS yearMonth,  \n    SUM(\n        CASE\n            WHEN kind NOT IN"
+" ('Maintenance', 'Revision', 'AircraftOnGround') THEN EXTRACT(EPOCH FROM duration) / 3600\n            ELSE 0\n        E"
+"ND\n    ) AS unscheduledHours2\nFROM OperationInterruption oi\nWHERE\n    oi.kind NOT IN ('Maintenance', 'Revision','Air"
+"craftOnGround')\n-- BR 8\n    AND TO_CHAR(oi.departure, 'YYMMDD') = SUBSTRING(oi.flightID, 1, 6)\nGROUP BY \n    aircraf"
+"tRegistration,\n    startTime;";
		    

            	globalMap.put("tDBInput_2_QUERY",dbquery_tDBInput_2);
		    java.sql.ResultSet rs_tDBInput_2 = null;

		    try {
		    	rs_tDBInput_2 = stmt_tDBInput_2.executeQuery(dbquery_tDBInput_2);
		    	java.sql.ResultSetMetaData rsmd_tDBInput_2 = rs_tDBInput_2.getMetaData();
		    	int colQtyInRs_tDBInput_2 = rsmd_tDBInput_2.getColumnCount();

		    String tmpContent_tDBInput_2 = null;
		    
		    
		    while (rs_tDBInput_2.next()) {
		        nb_line_tDBInput_2++;
		        
							if(colQtyInRs_tDBInput_2 < 1) {
								row2.aircraftregistration = null;
							} else {
	                         		
        	row2.aircraftregistration = routines.system.JDBCUtil.getString(rs_tDBInput_2, 1, false);
		                    }
							if(colQtyInRs_tDBInput_2 < 2) {
								row2.yearmonth = null;
							} else {
	                         		
        	row2.yearmonth = routines.system.JDBCUtil.getString(rs_tDBInput_2, 2, false);
		                    }
							if(colQtyInRs_tDBInput_2 < 3) {
								row2.unscheduledhours2 = null;
							} else {
	                         		
            row2.unscheduledhours2 = rs_tDBInput_2.getDouble(3);
            if(rs_tDBInput_2.wasNull()){
                    row2.unscheduledhours2 = null;
            }
		                    }
					


 



/**
 * [tDBInput_2 begin ] stop
 */
	
	/**
	 * [tDBInput_2 main ] start
	 */

	

	
	
	currentComponent="tDBInput_2";

	

 


	tos_count_tDBInput_2++;

/**
 * [tDBInput_2 main ] stop
 */
	
	/**
	 * [tDBInput_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBInput_2";

	

 



/**
 * [tDBInput_2 process_data_begin ] stop
 */

	
	/**
	 * [tJoin_3 main ] start
	 */

	

	
	
	currentComponent="tJoin_3";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row2"
						
						);
					}
					

			row7 = null;	
			row7 = null;	
	
				row7 = new row7Struct();						
						row7.aircraftregistration = row2.aircraftregistration;					
						row7.yearmonth = row2.yearmonth;					
						row7.unscheduledhours2 = row2.unscheduledhours2;
	
				row7 = new row7Struct();						
						row7.aircraftregistration = row2.aircraftregistration;					
						row7.yearmonth = row2.yearmonth;					
						row7.unscheduledhours2 = row2.unscheduledhours2;

			if(util_tJoin_3.isJoined(row2)){ 
			} 
		
				else{ 
						row7 = null;  
						row7 = null; 
				}		
///////////////////////    			

 


	tos_count_tJoin_3++;

/**
 * [tJoin_3 main ] stop
 */
	
	/**
	 * [tJoin_3 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJoin_3";

	

 



/**
 * [tJoin_3 process_data_begin ] stop
 */
// Start of branch "row7"
if(row7 != null) { 



	
	/**
	 * [tHash_row7 main ] start
	 */

	

	
	
	currentComponent="tHash_row7";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row7"
						
						);
					}
					

row7Struct row7_HashRow = new row7Struct();

					row7_HashRow.aircraftregistration = row7.aircraftregistration;
					row7_HashRow.yearmonth = row7.yearmonth;
					row7_HashRow.unscheduledhours2 = row7.unscheduledhours2;
tHash_row7.put(row7_HashRow, row7_HashRow);


 


	tos_count_tHash_row7++;

/**
 * [tHash_row7 main ] stop
 */
	
	/**
	 * [tHash_row7 process_data_begin ] start
	 */

	

	
	
	currentComponent="tHash_row7";

	

 



/**
 * [tHash_row7 process_data_begin ] stop
 */
	
	/**
	 * [tHash_row7 process_data_end ] start
	 */

	

	
	
	currentComponent="tHash_row7";

	

 



/**
 * [tHash_row7 process_data_end ] stop
 */

} // End of branch "row7"




	
	/**
	 * [tJoin_3 process_data_end ] start
	 */

	

	
	
	currentComponent="tJoin_3";

	

 



/**
 * [tJoin_3 process_data_end ] stop
 */



	
	/**
	 * [tDBInput_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBInput_2";

	

 



/**
 * [tDBInput_2 process_data_end ] stop
 */
	
	/**
	 * [tDBInput_2 end ] start
	 */

	

	
	
	currentComponent="tDBInput_2";

	

	}
}finally{
	if (rs_tDBInput_2 != null) {
		rs_tDBInput_2.close();
	}
	if (stmt_tDBInput_2 != null) {
		stmt_tDBInput_2.close();
	}
	if(conn_tDBInput_2 != null && !conn_tDBInput_2.isClosed()) {
		
			conn_tDBInput_2.commit();
			
		
			conn_tDBInput_2.close();
			
			if("com.mysql.cj.jdbc.Driver".equals((String)globalMap.get("driverClass_"))
			    && routines.system.BundleUtils.inOSGi()) {
			        Class.forName("com.mysql.cj.jdbc.AbandonedConnectionCleanupThread").
			            getMethod("checkedShutdown").invoke(null, (Object[]) null);
			}
			
	}
	
}
globalMap.put("tDBInput_2_NB_LINE",nb_line_tDBInput_2);
 

ok_Hash.put("tDBInput_2", true);
end_Hash.put("tDBInput_2", System.currentTimeMillis());




/**
 * [tDBInput_2 end ] stop
 */

	
	/**
	 * [tJoin_3 end ] start
	 */

	

	
	
	currentComponent="tJoin_3";

	

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row2");
			  	}
			  	
 

ok_Hash.put("tJoin_3", true);
end_Hash.put("tJoin_3", System.currentTimeMillis());




/**
 * [tJoin_3 end ] stop
 */

	
	/**
	 * [tHash_row7 end ] start
	 */

	

	
	
	currentComponent="tHash_row7";

	

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row7");
			  	}
			  	
 

ok_Hash.put("tHash_row7", true);
end_Hash.put("tHash_row7", System.currentTimeMillis());




/**
 * [tHash_row7 end ] stop
 */






				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				      	
					      			//free memory for "tJoin_3"
									globalMap.remove("tHash_TRIMflightID");
				      			
				try{
					
	
	/**
	 * [tDBInput_2 finally ] start
	 */

	

	
	
	currentComponent="tDBInput_2";

	

 



/**
 * [tDBInput_2 finally ] stop
 */

	
	/**
	 * [tJoin_3 finally ] start
	 */

	

	
	
	currentComponent="tJoin_3";

	

 



/**
 * [tJoin_3 finally ] stop
 */

	
	/**
	 * [tHash_row7 finally ] start
	 */

	

	
	
	currentComponent="tHash_row7";

	

 



/**
 * [tHash_row7 finally ] stop
 */






				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBInput_2_SUBPROCESS_STATE", 1);
	}
	


public static class TRIMflightIDStruct implements routines.system.IPersistableComparableLookupRow<TRIMflightIDStruct> {
    final static byte[] commonByteArrayLock_DW_PROJECT2_AircraftUtilization = new byte[0];
    static byte[] commonByteArray_DW_PROJECT2_AircraftUtilization = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public String aircraftRegi;

				public String getAircraftRegi () {
					return this.aircraftRegi;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.aircraftRegi == null) ? 0 : this.aircraftRegi.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final TRIMflightIDStruct other = (TRIMflightIDStruct) obj;
		
						if (this.aircraftRegi == null) {
							if (other.aircraftRegi != null)
								return false;
						
						} else if (!this.aircraftRegi.equals(other.aircraftRegi))
						
							return false;
					

		return true;
    }

	public void copyDataTo(TRIMflightIDStruct other) {

		other.aircraftRegi = this.aircraftRegi;
	            
	}

	public void copyKeysDataTo(TRIMflightIDStruct other) {

		other.aircraftRegi = this.aircraftRegi;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_DW_PROJECT2_AircraftUtilization.length) {
				if(length < 1024 && commonByteArray_DW_PROJECT2_AircraftUtilization.length == 0) {
   					commonByteArray_DW_PROJECT2_AircraftUtilization = new byte[1024];
				} else {
   					commonByteArray_DW_PROJECT2_AircraftUtilization = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_DW_PROJECT2_AircraftUtilization, 0, length);
			strReturn = new String(commonByteArray_DW_PROJECT2_AircraftUtilization, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_DW_PROJECT2_AircraftUtilization.length) {
				if(length < 1024 && commonByteArray_DW_PROJECT2_AircraftUtilization.length == 0) {
   					commonByteArray_DW_PROJECT2_AircraftUtilization = new byte[1024];
				} else {
   					commonByteArray_DW_PROJECT2_AircraftUtilization = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_DW_PROJECT2_AircraftUtilization, 0, length);
			strReturn = new String(commonByteArray_DW_PROJECT2_AircraftUtilization, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readKeysData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_DW_PROJECT2_AircraftUtilization) {

        	try {

        		int length = 0;
		
					this.aircraftRegi = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readKeysData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_DW_PROJECT2_AircraftUtilization) {

        	try {

        		int length = 0;
		
					this.aircraftRegi = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeKeysData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.aircraftRegi,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeKeysData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.aircraftRegi,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }



    /**
     * Fill Values data by reading ObjectInputStream.
     */
    public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
        try {

			int length = 0;
		

		

        }

		
        	finally {}

    }
    
    public void readValuesData(DataInputStream dis, org.jboss.marshalling.Unmarshaller objectIn) {
        try {
			int length = 0;
		

		

        }

		
        	finally {}

    }

    /**
     * Return a byte array which represents Values data.
     */
    public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
        try {

		
        	}
        	finally {}

    }
    
    public void writeValuesData(DataOutputStream dos, org.jboss.marshalling.Marshaller objectOut){
                try {

		
        	}
        	finally {}
    }


    
    public boolean supportMarshaller(){
        return true;
    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("aircraftRegi="+aircraftRegi);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(TRIMflightIDStruct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.aircraftRegi, other.aircraftRegi);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row6Struct implements routines.system.IPersistableRow<row6Struct> {
    final static byte[] commonByteArrayLock_DW_PROJECT2_AircraftUtilization = new byte[0];
    static byte[] commonByteArray_DW_PROJECT2_AircraftUtilization = new byte[0];

	
			    public String flightid;

				public String getFlightid () {
					return this.flightid;
				}
				
			    public String delaycode;

				public String getDelaycode () {
					return this.delaycode;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_DW_PROJECT2_AircraftUtilization.length) {
				if(length < 1024 && commonByteArray_DW_PROJECT2_AircraftUtilization.length == 0) {
   					commonByteArray_DW_PROJECT2_AircraftUtilization = new byte[1024];
				} else {
   					commonByteArray_DW_PROJECT2_AircraftUtilization = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_DW_PROJECT2_AircraftUtilization, 0, length);
			strReturn = new String(commonByteArray_DW_PROJECT2_AircraftUtilization, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_DW_PROJECT2_AircraftUtilization.length) {
				if(length < 1024 && commonByteArray_DW_PROJECT2_AircraftUtilization.length == 0) {
   					commonByteArray_DW_PROJECT2_AircraftUtilization = new byte[1024];
				} else {
   					commonByteArray_DW_PROJECT2_AircraftUtilization = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_DW_PROJECT2_AircraftUtilization, 0, length);
			strReturn = new String(commonByteArray_DW_PROJECT2_AircraftUtilization, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_DW_PROJECT2_AircraftUtilization) {

        	try {

        		int length = 0;
		
					this.flightid = readString(dis);
					
					this.delaycode = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_DW_PROJECT2_AircraftUtilization) {

        	try {

        		int length = 0;
		
					this.flightid = readString(dis);
					
					this.delaycode = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.flightid,dos);
					
					// String
				
						writeString(this.delaycode,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.flightid,dos);
					
					// String
				
						writeString(this.delaycode,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("flightid="+flightid);
		sb.append(",delaycode="+delaycode);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row6Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row5Struct implements routines.system.IPersistableRow<row5Struct> {
    final static byte[] commonByteArrayLock_DW_PROJECT2_AircraftUtilization = new byte[0];
    static byte[] commonByteArray_DW_PROJECT2_AircraftUtilization = new byte[0];

	
			    public String flightid;

				public String getFlightid () {
					return this.flightid;
				}
				
			    public String delaycode;

				public String getDelaycode () {
					return this.delaycode;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_DW_PROJECT2_AircraftUtilization.length) {
				if(length < 1024 && commonByteArray_DW_PROJECT2_AircraftUtilization.length == 0) {
   					commonByteArray_DW_PROJECT2_AircraftUtilization = new byte[1024];
				} else {
   					commonByteArray_DW_PROJECT2_AircraftUtilization = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_DW_PROJECT2_AircraftUtilization, 0, length);
			strReturn = new String(commonByteArray_DW_PROJECT2_AircraftUtilization, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_DW_PROJECT2_AircraftUtilization.length) {
				if(length < 1024 && commonByteArray_DW_PROJECT2_AircraftUtilization.length == 0) {
   					commonByteArray_DW_PROJECT2_AircraftUtilization = new byte[1024];
				} else {
   					commonByteArray_DW_PROJECT2_AircraftUtilization = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_DW_PROJECT2_AircraftUtilization, 0, length);
			strReturn = new String(commonByteArray_DW_PROJECT2_AircraftUtilization, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_DW_PROJECT2_AircraftUtilization) {

        	try {

        		int length = 0;
		
					this.flightid = readString(dis);
					
					this.delaycode = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_DW_PROJECT2_AircraftUtilization) {

        	try {

        		int length = 0;
		
					this.flightid = readString(dis);
					
					this.delaycode = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.flightid,dos);
					
					// String
				
						writeString(this.delaycode,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.flightid,dos);
					
					// String
				
						writeString(this.delaycode,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("flightid="+flightid);
		sb.append(",delaycode="+delaycode);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row5Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class after_tDBInput_3Struct implements routines.system.IPersistableRow<after_tDBInput_3Struct> {
    final static byte[] commonByteArrayLock_DW_PROJECT2_AircraftUtilization = new byte[0];
    static byte[] commonByteArray_DW_PROJECT2_AircraftUtilization = new byte[0];

	
			    public String flightid;

				public String getFlightid () {
					return this.flightid;
				}
				
			    public String delaycode;

				public String getDelaycode () {
					return this.delaycode;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_DW_PROJECT2_AircraftUtilization.length) {
				if(length < 1024 && commonByteArray_DW_PROJECT2_AircraftUtilization.length == 0) {
   					commonByteArray_DW_PROJECT2_AircraftUtilization = new byte[1024];
				} else {
   					commonByteArray_DW_PROJECT2_AircraftUtilization = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_DW_PROJECT2_AircraftUtilization, 0, length);
			strReturn = new String(commonByteArray_DW_PROJECT2_AircraftUtilization, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_DW_PROJECT2_AircraftUtilization.length) {
				if(length < 1024 && commonByteArray_DW_PROJECT2_AircraftUtilization.length == 0) {
   					commonByteArray_DW_PROJECT2_AircraftUtilization = new byte[1024];
				} else {
   					commonByteArray_DW_PROJECT2_AircraftUtilization = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_DW_PROJECT2_AircraftUtilization, 0, length);
			strReturn = new String(commonByteArray_DW_PROJECT2_AircraftUtilization, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_DW_PROJECT2_AircraftUtilization) {

        	try {

        		int length = 0;
		
					this.flightid = readString(dis);
					
					this.delaycode = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_DW_PROJECT2_AircraftUtilization) {

        	try {

        		int length = 0;
		
					this.flightid = readString(dis);
					
					this.delaycode = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.flightid,dos);
					
					// String
				
						writeString(this.delaycode,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.flightid,dos);
					
					// String
				
						writeString(this.delaycode,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("flightid="+flightid);
		sb.append(",delaycode="+delaycode);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(after_tDBInput_3Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tDBInput_3Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBInput_3_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;


		tDBInput_4Process(globalMap);

		row5Struct row5 = new row5Struct();
row6Struct row6 = new row6Struct();
TRIMflightIDStruct TRIMflightID = new TRIMflightIDStruct();






	
	/**
	 * [tHash_TRIMflightID begin ] start
	 */

	

	
		
		ok_Hash.put("tHash_TRIMflightID", false);
		start_Hash.put("tHash_TRIMflightID", System.currentTimeMillis());
		
	
	currentComponent="tHash_TRIMflightID";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"TRIMflightID");
					}
				
		int tos_count_tHash_TRIMflightID = 0;
		

				java.util.Map<TRIMflightIDStruct, TRIMflightIDStruct> tHash_TRIMflightID = new java.util.LinkedHashMap<TRIMflightIDStruct, TRIMflightIDStruct>();
	            globalMap.put("tHash_TRIMflightID", tHash_TRIMflightID);
			
            

 



/**
 * [tHash_TRIMflightID begin ] stop
 */



	
	/**
	 * [tMap_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_2", false);
		start_Hash.put("tMap_2", System.currentTimeMillis());
		
	
	currentComponent="tMap_2";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row6");
					}
				
		int tos_count_tMap_2 = 0;
		




// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_2__Struct  {
	String var1;
}
Var__tMap_2__Struct Var__tMap_2 = new Var__tMap_2__Struct();
// ###############################

// ###############################
// # Outputs initialization
TRIMflightIDStruct TRIMflightID_tmp = new TRIMflightIDStruct();
// ###############################

        
        



        









 



/**
 * [tMap_2 begin ] stop
 */



	
	/**
	 * [tJoin_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tJoin_2", false);
		start_Hash.put("tJoin_2", System.currentTimeMillis());
		
	
	currentComponent="tJoin_2";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row5");
					}
				
		int tos_count_tJoin_2 = 0;
		
    final java.util.Map<row4Struct, row4Struct> tHash_tJoin_2 = (java.util.Map<row4Struct, row4Struct>) globalMap.get("tHash_row4");
    
    class Util_tJoin_2
    {
        row4Struct lookupValue = null;
        row4Struct row4HashKey = new row4Struct(); 
        
        public boolean isJoined(row5Struct mainRow) {                        
           row4HashKey.flightid = mainRow.flightid;
            
           row4HashKey.delaycode = mainRow.delaycode;

			row4HashKey.hashCodeDirty = true;			             
            lookupValue = tHash_tJoin_2.get(row4HashKey);            
            if(lookupValue != null){
            	return true;
            }else{
            }  
            return false;
        }
    }
        
	Util_tJoin_2 util_tJoin_2 = new Util_tJoin_2();
        
    int nb_line_tJoin_2 = 0; 
 



/**
 * [tJoin_2 begin ] stop
 */



	
	/**
	 * [tDBInput_3 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBInput_3", false);
		start_Hash.put("tDBInput_3", System.currentTimeMillis());
		
	
	currentComponent="tDBInput_3";

	
		int tos_count_tDBInput_3 = 0;
		
	
    
	
		    int nb_line_tDBInput_3 = 0;
		    java.sql.Connection conn_tDBInput_3 = null;
				String driverClass_tDBInput_3 = "org.postgresql.Driver";
			    java.lang.Class jdbcclazz_tDBInput_3 = java.lang.Class.forName(driverClass_tDBInput_3);
				String dbUser_tDBInput_3 = "joan.acero";
				
				 
	final String decryptedPassword_tDBInput_3 = routines.system.PasswordEncryptUtil.decryptPassword("enc:routine.encryption.key.v1:NRPemLfx9ZLlHVv8eqP62pTYvnhk6XOoxy1bzvbxuQT7Fsc1");
				
				String dbPwd_tDBInput_3 = decryptedPassword_tDBInput_3;
				
				String url_tDBInput_3 = "jdbc:postgresql://" + "postgresfib.fib.upc.edu" + ":" + "6433" + "/" + "AIMS";
				
				conn_tDBInput_3 = java.sql.DriverManager.getConnection(url_tDBInput_3,dbUser_tDBInput_3,dbPwd_tDBInput_3);
		        
				conn_tDBInput_3.setAutoCommit(false);
			
		    
			java.sql.Statement stmt_tDBInput_3 = conn_tDBInput_3.createStatement();

		    String dbquery_tDBInput_3 = "SELECT flightID, delayCode\nFROM Flights\nWHERE delayCode IS NOT NULL \n  AND delayCode <> '';\n";
		    

            	globalMap.put("tDBInput_3_QUERY",dbquery_tDBInput_3);
		    java.sql.ResultSet rs_tDBInput_3 = null;

		    try {
		    	rs_tDBInput_3 = stmt_tDBInput_3.executeQuery(dbquery_tDBInput_3);
		    	java.sql.ResultSetMetaData rsmd_tDBInput_3 = rs_tDBInput_3.getMetaData();
		    	int colQtyInRs_tDBInput_3 = rsmd_tDBInput_3.getColumnCount();

		    String tmpContent_tDBInput_3 = null;
		    
		    
		    while (rs_tDBInput_3.next()) {
		        nb_line_tDBInput_3++;
		        
							if(colQtyInRs_tDBInput_3 < 1) {
								row5.flightid = null;
							} else {
	                         		
        	row5.flightid = routines.system.JDBCUtil.getString(rs_tDBInput_3, 1, false);
		                    }
							if(colQtyInRs_tDBInput_3 < 2) {
								row5.delaycode = null;
							} else {
	                         		
        	row5.delaycode = routines.system.JDBCUtil.getString(rs_tDBInput_3, 2, false);
		                    }
					


 



/**
 * [tDBInput_3 begin ] stop
 */
	
	/**
	 * [tDBInput_3 main ] start
	 */

	

	
	
	currentComponent="tDBInput_3";

	

 


	tos_count_tDBInput_3++;

/**
 * [tDBInput_3 main ] stop
 */
	
	/**
	 * [tDBInput_3 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBInput_3";

	

 



/**
 * [tDBInput_3 process_data_begin ] stop
 */

	
	/**
	 * [tJoin_2 main ] start
	 */

	

	
	
	currentComponent="tJoin_2";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row5"
						
						);
					}
					

			row6 = null;	
	
				row6 = new row6Struct();						
						row6.flightid = row5.flightid;					
						row6.delaycode = row5.delaycode;

			if(util_tJoin_2.isJoined(row5)){ 
			} 
		
				else{ 
						row6 = null; 
				}		
///////////////////////    			

 


	tos_count_tJoin_2++;

/**
 * [tJoin_2 main ] stop
 */
	
	/**
	 * [tJoin_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJoin_2";

	

 



/**
 * [tJoin_2 process_data_begin ] stop
 */
// Start of branch "row6"
if(row6 != null) { 



	
	/**
	 * [tMap_2 main ] start
	 */

	

	
	
	currentComponent="tMap_2";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row6"
						
						);
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_2 = false;
		

        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_2 = false;
		  boolean mainRowRejected_tMap_2 = false;
            				    								  
		// ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_2__Struct Var = Var__tMap_2;
Var.var1 = StringHandling.RIGHT(row6.flightid,6) ;// ###############################
        // ###############################
        // # Output tables

TRIMflightID = null;


// # Output table : 'TRIMflightID'
TRIMflightID_tmp.aircraftRegi = Var.var1 ;
TRIMflightID = TRIMflightID_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_2 = false;










 


	tos_count_tMap_2++;

/**
 * [tMap_2 main ] stop
 */
	
	/**
	 * [tMap_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_2";

	

 



/**
 * [tMap_2 process_data_begin ] stop
 */
// Start of branch "TRIMflightID"
if(TRIMflightID != null) { 



	
	/**
	 * [tHash_TRIMflightID main ] start
	 */

	

	
	
	currentComponent="tHash_TRIMflightID";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"TRIMflightID"
						
						);
					}
					

TRIMflightIDStruct TRIMflightID_HashRow = new TRIMflightIDStruct();

					TRIMflightID_HashRow.aircraftRegi = TRIMflightID.aircraftRegi;
tHash_TRIMflightID.put(TRIMflightID_HashRow, TRIMflightID_HashRow);


 


	tos_count_tHash_TRIMflightID++;

/**
 * [tHash_TRIMflightID main ] stop
 */
	
	/**
	 * [tHash_TRIMflightID process_data_begin ] start
	 */

	

	
	
	currentComponent="tHash_TRIMflightID";

	

 



/**
 * [tHash_TRIMflightID process_data_begin ] stop
 */
	
	/**
	 * [tHash_TRIMflightID process_data_end ] start
	 */

	

	
	
	currentComponent="tHash_TRIMflightID";

	

 



/**
 * [tHash_TRIMflightID process_data_end ] stop
 */

} // End of branch "TRIMflightID"




	
	/**
	 * [tMap_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_2";

	

 



/**
 * [tMap_2 process_data_end ] stop
 */

} // End of branch "row6"




	
	/**
	 * [tJoin_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tJoin_2";

	

 



/**
 * [tJoin_2 process_data_end ] stop
 */



	
	/**
	 * [tDBInput_3 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBInput_3";

	

 



/**
 * [tDBInput_3 process_data_end ] stop
 */
	
	/**
	 * [tDBInput_3 end ] start
	 */

	

	
	
	currentComponent="tDBInput_3";

	

	}
}finally{
	if (rs_tDBInput_3 != null) {
		rs_tDBInput_3.close();
	}
	if (stmt_tDBInput_3 != null) {
		stmt_tDBInput_3.close();
	}
	if(conn_tDBInput_3 != null && !conn_tDBInput_3.isClosed()) {
		
			conn_tDBInput_3.commit();
			
		
			conn_tDBInput_3.close();
			
			if("com.mysql.cj.jdbc.Driver".equals((String)globalMap.get("driverClass_"))
			    && routines.system.BundleUtils.inOSGi()) {
			        Class.forName("com.mysql.cj.jdbc.AbandonedConnectionCleanupThread").
			            getMethod("checkedShutdown").invoke(null, (Object[]) null);
			}
			
	}
	
}
globalMap.put("tDBInput_3_NB_LINE",nb_line_tDBInput_3);
 

ok_Hash.put("tDBInput_3", true);
end_Hash.put("tDBInput_3", System.currentTimeMillis());




/**
 * [tDBInput_3 end ] stop
 */

	
	/**
	 * [tJoin_2 end ] start
	 */

	

	
	
	currentComponent="tJoin_2";

	

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row5");
			  	}
			  	
 

ok_Hash.put("tJoin_2", true);
end_Hash.put("tJoin_2", System.currentTimeMillis());




/**
 * [tJoin_2 end ] stop
 */

	
	/**
	 * [tMap_2 end ] start
	 */

	

	
	
	currentComponent="tMap_2";

	


// ###############################
// # Lookup hashes releasing
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row6");
			  	}
			  	
 

ok_Hash.put("tMap_2", true);
end_Hash.put("tMap_2", System.currentTimeMillis());




/**
 * [tMap_2 end ] stop
 */

	
	/**
	 * [tHash_TRIMflightID end ] start
	 */

	

	
	
	currentComponent="tHash_TRIMflightID";

	

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"TRIMflightID");
			  	}
			  	
 

ok_Hash.put("tHash_TRIMflightID", true);
end_Hash.put("tHash_TRIMflightID", System.currentTimeMillis());




/**
 * [tHash_TRIMflightID end ] stop
 */









				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				      	
					      			//free memory for "tJoin_2"
									globalMap.remove("tHash_row4");
				      			
				try{
					
	
	/**
	 * [tDBInput_3 finally ] start
	 */

	

	
	
	currentComponent="tDBInput_3";

	

 



/**
 * [tDBInput_3 finally ] stop
 */

	
	/**
	 * [tJoin_2 finally ] start
	 */

	

	
	
	currentComponent="tJoin_2";

	

 



/**
 * [tJoin_2 finally ] stop
 */

	
	/**
	 * [tMap_2 finally ] start
	 */

	

	
	
	currentComponent="tMap_2";

	

 



/**
 * [tMap_2 finally ] stop
 */

	
	/**
	 * [tHash_TRIMflightID finally ] start
	 */

	

	
	
	currentComponent="tHash_TRIMflightID";

	

 



/**
 * [tHash_TRIMflightID finally ] stop
 */









				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBInput_3_SUBPROCESS_STATE", 1);
	}
	


public static class row4Struct implements routines.system.IPersistableComparableLookupRow<row4Struct> {
    final static byte[] commonByteArrayLock_DW_PROJECT2_AircraftUtilization = new byte[0];
    static byte[] commonByteArray_DW_PROJECT2_AircraftUtilization = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public String flightid;

				public String getFlightid () {
					return this.flightid;
				}
				
			    public String delaycode;

				public String getDelaycode () {
					return this.delaycode;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.flightid == null) ? 0 : this.flightid.hashCode());
					
						result = prime * result + ((this.delaycode == null) ? 0 : this.delaycode.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row4Struct other = (row4Struct) obj;
		
						if (this.flightid == null) {
							if (other.flightid != null)
								return false;
						
						} else if (!this.flightid.equals(other.flightid))
						
							return false;
					
						if (this.delaycode == null) {
							if (other.delaycode != null)
								return false;
						
						} else if (!this.delaycode.equals(other.delaycode))
						
							return false;
					

		return true;
    }

	public void copyDataTo(row4Struct other) {

		other.flightid = this.flightid;
	            other.delaycode = this.delaycode;
	            
	}

	public void copyKeysDataTo(row4Struct other) {

		other.flightid = this.flightid;
	            	other.delaycode = this.delaycode;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_DW_PROJECT2_AircraftUtilization.length) {
				if(length < 1024 && commonByteArray_DW_PROJECT2_AircraftUtilization.length == 0) {
   					commonByteArray_DW_PROJECT2_AircraftUtilization = new byte[1024];
				} else {
   					commonByteArray_DW_PROJECT2_AircraftUtilization = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_DW_PROJECT2_AircraftUtilization, 0, length);
			strReturn = new String(commonByteArray_DW_PROJECT2_AircraftUtilization, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_DW_PROJECT2_AircraftUtilization.length) {
				if(length < 1024 && commonByteArray_DW_PROJECT2_AircraftUtilization.length == 0) {
   					commonByteArray_DW_PROJECT2_AircraftUtilization = new byte[1024];
				} else {
   					commonByteArray_DW_PROJECT2_AircraftUtilization = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_DW_PROJECT2_AircraftUtilization, 0, length);
			strReturn = new String(commonByteArray_DW_PROJECT2_AircraftUtilization, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readKeysData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_DW_PROJECT2_AircraftUtilization) {

        	try {

        		int length = 0;
		
					this.flightid = readString(dis);
					
					this.delaycode = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readKeysData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_DW_PROJECT2_AircraftUtilization) {

        	try {

        		int length = 0;
		
					this.flightid = readString(dis);
					
					this.delaycode = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeKeysData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.flightid,dos);
					
					// String
				
						writeString(this.delaycode,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeKeysData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.flightid,dos);
					
					// String
				
						writeString(this.delaycode,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }



    /**
     * Fill Values data by reading ObjectInputStream.
     */
    public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
        try {

			int length = 0;
		

		

        }

		
        	finally {}

    }
    
    public void readValuesData(DataInputStream dis, org.jboss.marshalling.Unmarshaller objectIn) {
        try {
			int length = 0;
		

		

        }

		
        	finally {}

    }

    /**
     * Return a byte array which represents Values data.
     */
    public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
        try {

		
        	}
        	finally {}

    }
    
    public void writeValuesData(DataOutputStream dos, org.jboss.marshalling.Marshaller objectOut){
                try {

		
        	}
        	finally {}
    }


    
    public boolean supportMarshaller(){
        return true;
    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("flightid="+flightid);
		sb.append(",delaycode="+delaycode);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row4Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.flightid, other.flightid);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.delaycode, other.delaycode);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tDBInput_4Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBInput_4_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row4Struct row4 = new row4Struct();




	
	/**
	 * [tHash_row4 begin ] start
	 */

	

	
		
		ok_Hash.put("tHash_row4", false);
		start_Hash.put("tHash_row4", System.currentTimeMillis());
		
	
	currentComponent="tHash_row4";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row4");
					}
				
		int tos_count_tHash_row4 = 0;
		

				java.util.Map<row4Struct, row4Struct> tHash_row4 = new java.util.LinkedHashMap<row4Struct, row4Struct>();
	            globalMap.put("tHash_row4", tHash_row4);
			
            

 



/**
 * [tHash_row4 begin ] stop
 */



	
	/**
	 * [tDBInput_4 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBInput_4", false);
		start_Hash.put("tDBInput_4", System.currentTimeMillis());
		
	
	currentComponent="tDBInput_4";

	
		int tos_count_tDBInput_4 = 0;
		
	
    
	
		    int nb_line_tDBInput_4 = 0;
		    java.sql.Connection conn_tDBInput_4 = null;
				String driverClass_tDBInput_4 = "org.postgresql.Driver";
			    java.lang.Class jdbcclazz_tDBInput_4 = java.lang.Class.forName(driverClass_tDBInput_4);
				String dbUser_tDBInput_4 = "joan.acero";
				
				 
	final String decryptedPassword_tDBInput_4 = routines.system.PasswordEncryptUtil.decryptPassword("enc:routine.encryption.key.v1:oG9td0ehlSsISWWTBcnoVCDm53hqgDZCOZU1gSHYbJYbdzxT");
				
				String dbPwd_tDBInput_4 = decryptedPassword_tDBInput_4;
				
				String url_tDBInput_4 = "jdbc:postgresql://" + "postgresfib.fib.upc.edu" + ":" + "6433" + "/" + "AMOS";
				
				conn_tDBInput_4 = java.sql.DriverManager.getConnection(url_tDBInput_4,dbUser_tDBInput_4,dbPwd_tDBInput_4);
		        
				conn_tDBInput_4.setAutoCommit(false);
			
		    
			java.sql.Statement stmt_tDBInput_4 = conn_tDBInput_4.createStatement();

		    String dbquery_tDBInput_4 = "SELECT \n    flightID, delayCode\nFROM OperationInterruption oi\nWHERE\n    oi.kind NOT IN ('Maintenance', 'Revision','"
+"AircraftOnGround')\n-- BR 8\n    AND TO_CHAR(oi.departure, 'YYMMDD') = SUBSTRING(oi.flightID, 1, 6)\n	AND delayCode IS N"
+"OT NULL \n  AND delayCode <> '';\n";
		    

            	globalMap.put("tDBInput_4_QUERY",dbquery_tDBInput_4);
		    java.sql.ResultSet rs_tDBInput_4 = null;

		    try {
		    	rs_tDBInput_4 = stmt_tDBInput_4.executeQuery(dbquery_tDBInput_4);
		    	java.sql.ResultSetMetaData rsmd_tDBInput_4 = rs_tDBInput_4.getMetaData();
		    	int colQtyInRs_tDBInput_4 = rsmd_tDBInput_4.getColumnCount();

		    String tmpContent_tDBInput_4 = null;
		    
		    
		    while (rs_tDBInput_4.next()) {
		        nb_line_tDBInput_4++;
		        
							if(colQtyInRs_tDBInput_4 < 1) {
								row4.flightid = null;
							} else {
	                         		
        	row4.flightid = routines.system.JDBCUtil.getString(rs_tDBInput_4, 1, false);
		                    }
							if(colQtyInRs_tDBInput_4 < 2) {
								row4.delaycode = null;
							} else {
	                         		
        	row4.delaycode = routines.system.JDBCUtil.getString(rs_tDBInput_4, 2, false);
		                    }
					


 



/**
 * [tDBInput_4 begin ] stop
 */
	
	/**
	 * [tDBInput_4 main ] start
	 */

	

	
	
	currentComponent="tDBInput_4";

	

 


	tos_count_tDBInput_4++;

/**
 * [tDBInput_4 main ] stop
 */
	
	/**
	 * [tDBInput_4 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBInput_4";

	

 



/**
 * [tDBInput_4 process_data_begin ] stop
 */

	
	/**
	 * [tHash_row4 main ] start
	 */

	

	
	
	currentComponent="tHash_row4";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row4"
						
						);
					}
					

row4Struct row4_HashRow = new row4Struct();

					row4_HashRow.flightid = row4.flightid;
					row4_HashRow.delaycode = row4.delaycode;
tHash_row4.put(row4_HashRow, row4_HashRow);


 


	tos_count_tHash_row4++;

/**
 * [tHash_row4 main ] stop
 */
	
	/**
	 * [tHash_row4 process_data_begin ] start
	 */

	

	
	
	currentComponent="tHash_row4";

	

 



/**
 * [tHash_row4 process_data_begin ] stop
 */
	
	/**
	 * [tHash_row4 process_data_end ] start
	 */

	

	
	
	currentComponent="tHash_row4";

	

 



/**
 * [tHash_row4 process_data_end ] stop
 */



	
	/**
	 * [tDBInput_4 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBInput_4";

	

 



/**
 * [tDBInput_4 process_data_end ] stop
 */
	
	/**
	 * [tDBInput_4 end ] start
	 */

	

	
	
	currentComponent="tDBInput_4";

	

	}
}finally{
	if (rs_tDBInput_4 != null) {
		rs_tDBInput_4.close();
	}
	if (stmt_tDBInput_4 != null) {
		stmt_tDBInput_4.close();
	}
	if(conn_tDBInput_4 != null && !conn_tDBInput_4.isClosed()) {
		
			conn_tDBInput_4.commit();
			
		
			conn_tDBInput_4.close();
			
			if("com.mysql.cj.jdbc.Driver".equals((String)globalMap.get("driverClass_"))
			    && routines.system.BundleUtils.inOSGi()) {
			        Class.forName("com.mysql.cj.jdbc.AbandonedConnectionCleanupThread").
			            getMethod("checkedShutdown").invoke(null, (Object[]) null);
			}
			
	}
	
}
globalMap.put("tDBInput_4_NB_LINE",nb_line_tDBInput_4);
 

ok_Hash.put("tDBInput_4", true);
end_Hash.put("tDBInput_4", System.currentTimeMillis());




/**
 * [tDBInput_4 end ] stop
 */

	
	/**
	 * [tHash_row4 end ] start
	 */

	

	
	
	currentComponent="tHash_row4";

	

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row4");
			  	}
			  	
 

ok_Hash.put("tHash_row4", true);
end_Hash.put("tHash_row4", System.currentTimeMillis());




/**
 * [tHash_row4 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDBInput_4 finally ] start
	 */

	

	
	
	currentComponent="tDBInput_4";

	

 



/**
 * [tDBInput_4 finally ] stop
 */

	
	/**
	 * [tHash_row4 finally ] start
	 */

	

	
	
	currentComponent="tHash_row4";

	

 



/**
 * [tHash_row4 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBInput_4_SUBPROCESS_STATE", 1);
	}
	
    public String resuming_logs_dir_path = null;
    public String resuming_checkpoint_path = null;
    public String parent_part_launcher = null;
    private String resumeEntryMethodName = null;
    private boolean globalResumeTicket = false;

    public boolean watch = false;
    // portStats is null, it means don't execute the statistics
    public Integer portStats = null;
    public int portTraces = 4334;
    public String clientHost;
    public String defaultClientHost = "localhost";
    public String contextStr = "Default";
    public boolean isDefaultContext = true;
    public String pid = "0";
    public String rootPid = null;
    public String fatherPid = null;
    public String fatherNode = null;
    public long startTime = 0;
    public boolean isChildJob = false;
    public String log4jLevel = "";
    
    private boolean enableLogStash;

    private boolean execStat = true;

    private ThreadLocal<java.util.Map<String, String>> threadLocal = new ThreadLocal<java.util.Map<String, String>>() {
        protected java.util.Map<String, String> initialValue() {
            java.util.Map<String,String> threadRunResultMap = new java.util.HashMap<String, String>();
            threadRunResultMap.put("errorCode", null);
            threadRunResultMap.put("status", "");
            return threadRunResultMap;
        };
    };


    protected PropertiesWithType context_param = new PropertiesWithType();
    public java.util.Map<String, Object> parentContextMap = new java.util.HashMap<String, Object>();

    public String status= "";
    

    public static void main(String[] args){
        final AircraftUtilization AircraftUtilizationClass = new AircraftUtilization();

        int exitCode = AircraftUtilizationClass.runJobInTOS(args);

        System.exit(exitCode);
    }


    public String[][] runJob(String[] args) {

        int exitCode = runJobInTOS(args);
        String[][] bufferValue = new String[][] { { Integer.toString(exitCode) } };

        return bufferValue;
    }

    public boolean hastBufferOutputComponent() {
		boolean hastBufferOutput = false;
    	
        return hastBufferOutput;
    }

    public int runJobInTOS(String[] args) {
	   	// reset status
	   	status = "";
	   	
        String lastStr = "";
        for (String arg : args) {
            if (arg.equalsIgnoreCase("--context_param")) {
                lastStr = arg;
            } else if (lastStr.equals("")) {
                evalParam(arg);
            } else {
                evalParam(lastStr + " " + arg);
                lastStr = "";
            }
        }
        enableLogStash = "true".equalsIgnoreCase(System.getProperty("audit.enabled"));

    	
    	

        if(clientHost == null) {
            clientHost = defaultClientHost;
        }

        if(pid == null || "0".equals(pid)) {
            pid = TalendString.getAsciiRandomString(6);
        }

        if (rootPid==null) {
            rootPid = pid;
        }
        if (fatherPid==null) {
            fatherPid = pid;
        }else{
            isChildJob = true;
        }

        if (portStats != null) {
            // portStats = -1; //for testing
            if (portStats < 0 || portStats > 65535) {
                // issue:10869, the portStats is invalid, so this client socket can't open
                System.err.println("The statistics socket port " + portStats + " is invalid.");
                execStat = false;
            }
        } else {
            execStat = false;
        }
        boolean inOSGi = routines.system.BundleUtils.inOSGi();

        if (inOSGi) {
            java.util.Dictionary<String, Object> jobProperties = routines.system.BundleUtils.getJobProperties(jobName);

            if (jobProperties != null && jobProperties.get("context") != null) {
                contextStr = (String)jobProperties.get("context");
            }
        }

        try {
            //call job/subjob with an existing context, like: --context=production. if without this parameter, there will use the default context instead.
            java.io.InputStream inContext = AircraftUtilization.class.getClassLoader().getResourceAsStream("dw_project2/aircraftutilization_0_1/contexts/" + contextStr + ".properties");
            if (inContext == null) {
                inContext = AircraftUtilization.class.getClassLoader().getResourceAsStream("config/contexts/" + contextStr + ".properties");
            }
            if (inContext != null) {
                try {
                    //defaultProps is in order to keep the original context value
                    if(context != null && context.isEmpty()) {
	                defaultProps.load(inContext);
	                context = new ContextProperties(defaultProps);
                    }
                } finally {
                    inContext.close();
                }
            } else if (!isDefaultContext) {
                //print info and job continue to run, for case: context_param is not empty.
                System.err.println("Could not find the context " + contextStr);
            }

            if(!context_param.isEmpty()) {
                context.putAll(context_param);
				//set types for params from parentJobs
				for (Object key: context_param.keySet()){
					String context_key = key.toString();
					String context_type = context_param.getContextType(context_key);
					context.setContextType(context_key, context_type);

				}
            }
            class ContextProcessing {
                private void processContext_0() {
                } 
                public void processAllContext() {
                        processContext_0();
                }
            }

            new ContextProcessing().processAllContext();
        } catch (java.io.IOException ie) {
            System.err.println("Could not load context "+contextStr);
            ie.printStackTrace();
        }

        // get context value from parent directly
        if (parentContextMap != null && !parentContextMap.isEmpty()) {
        }

        //Resume: init the resumeUtil
        resumeEntryMethodName = ResumeUtil.getResumeEntryMethodName(resuming_checkpoint_path);
        resumeUtil = new ResumeUtil(resuming_logs_dir_path, isChildJob, rootPid);
        resumeUtil.initCommonInfo(pid, rootPid, fatherPid, projectName, jobName, contextStr, jobVersion);

		List<String> parametersToEncrypt = new java.util.ArrayList<String>();
        //Resume: jobStart
        resumeUtil.addLog("JOB_STARTED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "", "","","","",resumeUtil.convertToJsonText(context,parametersToEncrypt));

if(execStat) {
    try {
        runStat.openSocket(!isChildJob);
        runStat.setAllPID(rootPid, fatherPid, pid, jobName);
        runStat.startThreadStat(clientHost, portStats);
        runStat.updateStatOnJob(RunStat.JOBSTART, fatherNode);
    } catch (java.io.IOException ioException) {
        ioException.printStackTrace();
    }
}



	
	    java.util.concurrent.ConcurrentHashMap<Object, Object> concurrentHashMap = new java.util.concurrent.ConcurrentHashMap<Object, Object>();
	    globalMap.put("concurrentHashMap", concurrentHashMap);
	

    long startUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
    long endUsedMemory = 0;
    long end = 0;

    startTime = System.currentTimeMillis();


this.globalResumeTicket = true;//to run tPreJob





this.globalResumeTicket = false;//to run others jobs

try {
errorCode = null;tDBInput_5Process(globalMap);
if(!"failure".equals(status)) { status = "end"; }
}catch (TalendException e_tDBInput_5) {
globalMap.put("tDBInput_5_SUBPROCESS_STATE", -1);

e_tDBInput_5.printStackTrace();

}

this.globalResumeTicket = true;//to run tPostJob




        end = System.currentTimeMillis();

        if (watch) {
            System.out.println((end-startTime)+" milliseconds");
        }

        endUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
        if (false) {
            System.out.println((endUsedMemory - startUsedMemory) + " bytes memory increase when running : AircraftUtilization");
        }



if (execStat) {
    runStat.updateStatOnJob(RunStat.JOBEND, fatherNode);
    runStat.stopThreadStat();
}
    int returnCode = 0;


    if(errorCode == null) {
         returnCode = status != null && status.equals("failure") ? 1 : 0;
    } else {
         returnCode = errorCode.intValue();
    }
    resumeUtil.addLog("JOB_ENDED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "", "","" + returnCode,"","","");

    return returnCode;

  }

    // only for OSGi env
    public void destroy() {


    }














    private java.util.Map<String, Object> getSharedConnections4REST() {
        java.util.Map<String, Object> connections = new java.util.HashMap<String, Object>();






        return connections;
    }

    private void evalParam(String arg) {
        if (arg.startsWith("--resuming_logs_dir_path")) {
            resuming_logs_dir_path = arg.substring(25);
        } else if (arg.startsWith("--resuming_checkpoint_path")) {
            resuming_checkpoint_path = arg.substring(27);
        } else if (arg.startsWith("--parent_part_launcher")) {
            parent_part_launcher = arg.substring(23);
        } else if (arg.startsWith("--watch")) {
            watch = true;
        } else if (arg.startsWith("--stat_port=")) {
            String portStatsStr = arg.substring(12);
            if (portStatsStr != null && !portStatsStr.equals("null")) {
                portStats = Integer.parseInt(portStatsStr);
            }
        } else if (arg.startsWith("--trace_port=")) {
            portTraces = Integer.parseInt(arg.substring(13));
        } else if (arg.startsWith("--client_host=")) {
            clientHost = arg.substring(14);
        } else if (arg.startsWith("--context=")) {
            contextStr = arg.substring(10);
            isDefaultContext = false;
        } else if (arg.startsWith("--father_pid=")) {
            fatherPid = arg.substring(13);
        } else if (arg.startsWith("--root_pid=")) {
            rootPid = arg.substring(11);
        } else if (arg.startsWith("--father_node=")) {
            fatherNode = arg.substring(14);
        } else if (arg.startsWith("--pid=")) {
            pid = arg.substring(6);
        } else if (arg.startsWith("--context_type")) {
            String keyValue = arg.substring(15);
			int index = -1;
            if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
                if (fatherPid==null) {
                    context_param.setContextType(keyValue.substring(0, index), replaceEscapeChars(keyValue.substring(index + 1)));
                } else { // the subjob won't escape the especial chars
                    context_param.setContextType(keyValue.substring(0, index), keyValue.substring(index + 1) );
                }

            }

		} else if (arg.startsWith("--context_param")) {
            String keyValue = arg.substring(16);
            int index = -1;
            if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
                if (fatherPid==null) {
                    context_param.put(keyValue.substring(0, index), replaceEscapeChars(keyValue.substring(index + 1)));
                } else { // the subjob won't escape the especial chars
                    context_param.put(keyValue.substring(0, index), keyValue.substring(index + 1) );
                }
            }
        } else if (arg.startsWith("--log4jLevel=")) {
            log4jLevel = arg.substring(13);
		} else if (arg.startsWith("--audit.enabled") && arg.contains("=")) {//for trunjob call
		    final int equal = arg.indexOf('=');
			final String key = arg.substring("--".length(), equal);
			System.setProperty(key, arg.substring(equal + 1));
		}
    }
    
    private static final String NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY = "<TALEND_NULL>";

    private final String[][] escapeChars = {
        {"\\\\","\\"},{"\\n","\n"},{"\\'","\'"},{"\\r","\r"},
        {"\\f","\f"},{"\\b","\b"},{"\\t","\t"}
        };
    private String replaceEscapeChars (String keyValue) {

		if (keyValue == null || ("").equals(keyValue.trim())) {
			return keyValue;
		}

		StringBuilder result = new StringBuilder();
		int currIndex = 0;
		while (currIndex < keyValue.length()) {
			int index = -1;
			// judege if the left string includes escape chars
			for (String[] strArray : escapeChars) {
				index = keyValue.indexOf(strArray[0],currIndex);
				if (index>=0) {

					result.append(keyValue.substring(currIndex, index + strArray[0].length()).replace(strArray[0], strArray[1]));
					currIndex = index + strArray[0].length();
					break;
				}
			}
			// if the left string doesn't include escape chars, append the left into the result
			if (index < 0) {
				result.append(keyValue.substring(currIndex));
				currIndex = currIndex + keyValue.length();
			}
		}

		return result.toString();
    }

    public Integer getErrorCode() {
        return errorCode;
    }


    public String getStatus() {
        return status;
    }

    ResumeUtil resumeUtil = null;
}
/************************************************************************************************
 *     357957 characters generated by Talend Open Studio for Data Integration 
 *     on the 17 de diciembre de 2024, 22:29:46 CET
 ************************************************************************************************/